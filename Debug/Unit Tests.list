
Unit Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080022f4  080022f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002394  08002394  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002394  08002394  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002394  08002394  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002394  08002394  00012394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002398  08002398  00012398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800239c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000070  0800240c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  0800240c  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005daa  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001406  00000000  00000000  00025e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  00027250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b0  00000000  00000000  00027878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160e2  00000000  00000000  00027e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000662c  00000000  00000000  0003df0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080336  00000000  00000000  00044536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c486c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b9c  00000000  00000000  000c48c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080022dc 	.word	0x080022dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080022dc 	.word	0x080022dc

0800014c <getMax>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
int32_t getMax(int32_t term1, int32_t term2){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	if (term1 > term2) return term1;
 8000156:	687a      	ldr	r2, [r7, #4]
 8000158:	683b      	ldr	r3, [r7, #0]
 800015a:	429a      	cmp	r2, r3
 800015c:	dd01      	ble.n	8000162 <getMax+0x16>
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	e000      	b.n	8000164 <getMax+0x18>
	else return term2;
 8000162:	683b      	ldr	r3, [r7, #0]
}
 8000164:	4618      	mov	r0, r3
 8000166:	370c      	adds	r7, #12
 8000168:	46bd      	mov	sp, r7
 800016a:	bc80      	pop	{r7}
 800016c:	4770      	bx	lr
	...

08000170 <myPrint>:

void myPrint(UART_HandleTypeDef huart, uint8_t * pData){
 8000170:	b084      	sub	sp, #16
 8000172:	b580      	push	{r7, lr}
 8000174:	b0c0      	sub	sp, #256	; 0x100
 8000176:	af00      	add	r7, sp, #0
 8000178:	f507 7c84 	add.w	ip, r7, #264	; 0x108
 800017c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t MSG[255] = {'\0'};
 8000180:	463b      	mov	r3, r7
 8000182:	2200      	movs	r2, #0
 8000184:	601a      	str	r2, [r3, #0]
 8000186:	3304      	adds	r3, #4
 8000188:	22fb      	movs	r2, #251	; 0xfb
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f001 fc63 	bl	8001a58 <memset>
	sprintf((char *)MSG, (char *)pData);
 8000192:	463b      	mov	r3, r7
 8000194:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8000198:	4618      	mov	r0, r3
 800019a:	f001 fc65 	bl	8001a68 <siprintf>
	HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 0xFFFF);
 800019e:	4639      	mov	r1, r7
 80001a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001a4:	22ff      	movs	r2, #255	; 0xff
 80001a6:	4805      	ldr	r0, [pc, #20]	; (80001bc <myPrint+0x4c>)
 80001a8:	f001 fac1 	bl	800172e <HAL_UART_Transmit>
}
 80001ac:	bf00      	nop
 80001ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80001b2:	46bd      	mov	sp, r7
 80001b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr
 80001bc:	200000fc 	.word	0x200000fc

080001c0 <DtoZkette>:

uint8_t * DtoZkette(int32_t number){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	sprintf((char *)myMSG, "%d", number);
 80001c8:	687a      	ldr	r2, [r7, #4]
 80001ca:	4904      	ldr	r1, [pc, #16]	; (80001dc <DtoZkette+0x1c>)
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <DtoZkette+0x20>)
 80001ce:	f001 fc4b 	bl	8001a68 <siprintf>
	return myMSG;
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <DtoZkette+0x20>)
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	080022f4 	.word	0x080022f4
 80001e0:	2000008c 	.word	0x2000008c

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001e6:	b093      	sub	sp, #76	; 0x4c
 80001e8:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */
	int32_t a=-1, b=2, c=-3, d=5;
 80001ea:	f04f 33ff 	mov.w	r3, #4294967295
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	2302      	movs	r3, #2
 80001f2:	60bb      	str	r3, [r7, #8]
 80001f4:	f06f 0302 	mvn.w	r3, #2
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	2305      	movs	r3, #5
 80001fc:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fe:	f000 fadd 	bl	80007bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000202:	f000 f8f9 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000206:	f000 f963 	bl	80004d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800020a:	f000 f937 	bl	800047c <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  myPrint(huart2, "Max von a und c:");
 800020e:	4e75      	ldr	r6, [pc, #468]	; (80003e4 <main+0x200>)
 8000210:	4b75      	ldr	r3, [pc, #468]	; (80003e8 <main+0x204>)
 8000212:	930d      	str	r3, [sp, #52]	; 0x34
 8000214:	466d      	mov	r5, sp
 8000216:	f106 0410 	add.w	r4, r6, #16
 800021a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800021c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800021e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000226:	6823      	ldr	r3, [r4, #0]
 8000228:	602b      	str	r3, [r5, #0]
 800022a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800022e:	f7ff ff9f 	bl	8000170 <myPrint>
	  myPrint(huart2, DtoZkette(getMax(a, c)));
 8000232:	6879      	ldr	r1, [r7, #4]
 8000234:	68f8      	ldr	r0, [r7, #12]
 8000236:	f7ff ff89 	bl	800014c <getMax>
 800023a:	4603      	mov	r3, r0
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ffbf 	bl	80001c0 <DtoZkette>
 8000242:	4603      	mov	r3, r0
 8000244:	4e67      	ldr	r6, [pc, #412]	; (80003e4 <main+0x200>)
 8000246:	930d      	str	r3, [sp, #52]	; 0x34
 8000248:	466d      	mov	r5, sp
 800024a:	f106 0410 	add.w	r4, r6, #16
 800024e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800025a:	6823      	ldr	r3, [r4, #0]
 800025c:	602b      	str	r3, [r5, #0]
 800025e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000262:	f7ff ff85 	bl	8000170 <myPrint>
	  HAL_Delay(1000);
 8000266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800026a:	f000 fb09 	bl	8000880 <HAL_Delay>
	  myPrint(huart2, "\n");
 800026e:	4e5d      	ldr	r6, [pc, #372]	; (80003e4 <main+0x200>)
 8000270:	4b5e      	ldr	r3, [pc, #376]	; (80003ec <main+0x208>)
 8000272:	930d      	str	r3, [sp, #52]	; 0x34
 8000274:	466d      	mov	r5, sp
 8000276:	f106 0410 	add.w	r4, r6, #16
 800027a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800027c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800027e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000286:	6823      	ldr	r3, [r4, #0]
 8000288:	602b      	str	r3, [r5, #0]
 800028a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800028e:	f7ff ff6f 	bl	8000170 <myPrint>

	  myPrint(huart2, "Max von b und d:");
 8000292:	4e54      	ldr	r6, [pc, #336]	; (80003e4 <main+0x200>)
 8000294:	4b56      	ldr	r3, [pc, #344]	; (80003f0 <main+0x20c>)
 8000296:	930d      	str	r3, [sp, #52]	; 0x34
 8000298:	466d      	mov	r5, sp
 800029a:	f106 0410 	add.w	r4, r6, #16
 800029e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002aa:	6823      	ldr	r3, [r4, #0]
 80002ac:	602b      	str	r3, [r5, #0]
 80002ae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80002b2:	f7ff ff5d 	bl	8000170 <myPrint>
	  myPrint(huart2, DtoZkette(getMax(b, d)));
 80002b6:	6839      	ldr	r1, [r7, #0]
 80002b8:	68b8      	ldr	r0, [r7, #8]
 80002ba:	f7ff ff47 	bl	800014c <getMax>
 80002be:	4603      	mov	r3, r0
 80002c0:	4618      	mov	r0, r3
 80002c2:	f7ff ff7d 	bl	80001c0 <DtoZkette>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4e46      	ldr	r6, [pc, #280]	; (80003e4 <main+0x200>)
 80002ca:	930d      	str	r3, [sp, #52]	; 0x34
 80002cc:	466d      	mov	r5, sp
 80002ce:	f106 0410 	add.w	r4, r6, #16
 80002d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002de:	6823      	ldr	r3, [r4, #0]
 80002e0:	602b      	str	r3, [r5, #0]
 80002e2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80002e6:	f7ff ff43 	bl	8000170 <myPrint>
	  HAL_Delay(1000);
 80002ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ee:	f000 fac7 	bl	8000880 <HAL_Delay>
	  myPrint(huart2, "\n");
 80002f2:	4e3c      	ldr	r6, [pc, #240]	; (80003e4 <main+0x200>)
 80002f4:	4b3d      	ldr	r3, [pc, #244]	; (80003ec <main+0x208>)
 80002f6:	930d      	str	r3, [sp, #52]	; 0x34
 80002f8:	466d      	mov	r5, sp
 80002fa:	f106 0410 	add.w	r4, r6, #16
 80002fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800030a:	6823      	ldr	r3, [r4, #0]
 800030c:	602b      	str	r3, [r5, #0]
 800030e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000312:	f7ff ff2d 	bl	8000170 <myPrint>

	  myPrint(huart2, "Max von c und d:");
 8000316:	4e33      	ldr	r6, [pc, #204]	; (80003e4 <main+0x200>)
 8000318:	4b36      	ldr	r3, [pc, #216]	; (80003f4 <main+0x210>)
 800031a:	930d      	str	r3, [sp, #52]	; 0x34
 800031c:	466d      	mov	r5, sp
 800031e:	f106 0410 	add.w	r4, r6, #16
 8000322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800032a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800032c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800032e:	6823      	ldr	r3, [r4, #0]
 8000330:	602b      	str	r3, [r5, #0]
 8000332:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000336:	f7ff ff1b 	bl	8000170 <myPrint>
	  myPrint(huart2, DtoZkette(getMax(c, d)));
 800033a:	6839      	ldr	r1, [r7, #0]
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f7ff ff05 	bl	800014c <getMax>
 8000342:	4603      	mov	r3, r0
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff3b 	bl	80001c0 <DtoZkette>
 800034a:	4603      	mov	r3, r0
 800034c:	4e25      	ldr	r6, [pc, #148]	; (80003e4 <main+0x200>)
 800034e:	930d      	str	r3, [sp, #52]	; 0x34
 8000350:	466d      	mov	r5, sp
 8000352:	f106 0410 	add.w	r4, r6, #16
 8000356:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000358:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800035a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800035c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800035e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000362:	6823      	ldr	r3, [r4, #0]
 8000364:	602b      	str	r3, [r5, #0]
 8000366:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800036a:	f7ff ff01 	bl	8000170 <myPrint>
	  HAL_Delay(1000);
 800036e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000372:	f000 fa85 	bl	8000880 <HAL_Delay>
	  myPrint(huart2, "\n");
 8000376:	4e1b      	ldr	r6, [pc, #108]	; (80003e4 <main+0x200>)
 8000378:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <main+0x208>)
 800037a:	930d      	str	r3, [sp, #52]	; 0x34
 800037c:	466d      	mov	r5, sp
 800037e:	f106 0410 	add.w	r4, r6, #16
 8000382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800038a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800038c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800038e:	6823      	ldr	r3, [r4, #0]
 8000390:	602b      	str	r3, [r5, #0]
 8000392:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000396:	f7ff feeb 	bl	8000170 <myPrint>
	  myPrint(huart2, "\n");
 800039a:	4e12      	ldr	r6, [pc, #72]	; (80003e4 <main+0x200>)
 800039c:	4b13      	ldr	r3, [pc, #76]	; (80003ec <main+0x208>)
 800039e:	930d      	str	r3, [sp, #52]	; 0x34
 80003a0:	466d      	mov	r5, sp
 80003a2:	f106 0410 	add.w	r4, r6, #16
 80003a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003b2:	6823      	ldr	r3, [r4, #0]
 80003b4:	602b      	str	r3, [r5, #0]
 80003b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003ba:	f7ff fed9 	bl	8000170 <myPrint>
	  myPrint(huart2, "\n");
 80003be:	4e09      	ldr	r6, [pc, #36]	; (80003e4 <main+0x200>)
 80003c0:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <main+0x208>)
 80003c2:	930d      	str	r3, [sp, #52]	; 0x34
 80003c4:	466d      	mov	r5, sp
 80003c6:	f106 0410 	add.w	r4, r6, #16
 80003ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003d6:	6823      	ldr	r3, [r4, #0]
 80003d8:	602b      	str	r3, [r5, #0]
 80003da:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003de:	f7ff fec7 	bl	8000170 <myPrint>
	  myPrint(huart2, "Max von a und c:");
 80003e2:	e714      	b.n	800020e <main+0x2a>
 80003e4:	200000fc 	.word	0x200000fc
 80003e8:	080022f8 	.word	0x080022f8
 80003ec:	0800230c 	.word	0x0800230c
 80003f0:	08002310 	.word	0x08002310
 80003f4:	08002324 	.word	0x08002324

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b090      	sub	sp, #64	; 0x40
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0318 	add.w	r3, r7, #24
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f001 fb26 	bl	8001a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800041a:	2302      	movs	r3, #2
 800041c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041e:	2301      	movs	r3, #1
 8000420:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000422:	2310      	movs	r3, #16
 8000424:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000426:	2302      	movs	r3, #2
 8000428:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800042a:	2300      	movs	r3, #0
 800042c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800042e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000432:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000434:	f107 0318 	add.w	r3, r7, #24
 8000438:	4618      	mov	r0, r3
 800043a:	f000 fd11 	bl	8000e60 <HAL_RCC_OscConfig>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000444:	f000 f8b2 	bl	80005ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000448:	230f      	movs	r3, #15
 800044a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044c:	2302      	movs	r3, #2
 800044e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000458:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2102      	movs	r1, #2
 8000462:	4618      	mov	r0, r3
 8000464:	f000 ff7c 	bl	8001360 <HAL_RCC_ClockConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800046e:	f000 f89d 	bl	80005ac <Error_Handler>
  }
}
 8000472:	bf00      	nop
 8000474:	3740      	adds	r7, #64	; 0x40
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 8000482:	4a12      	ldr	r2, [pc, #72]	; (80004cc <MX_USART2_UART_Init+0x50>)
 8000484:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 8000488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800048c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 80004a2:	220c      	movs	r2, #12
 80004a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 80004b4:	f001 f8ee 	bl	8001694 <HAL_UART_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004be:	f000 f875 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	200000fc 	.word	0x200000fc
 80004cc:	40004400 	.word	0x40004400

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e4:	4b2d      	ldr	r3, [pc, #180]	; (800059c <MX_GPIO_Init+0xcc>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a2c      	ldr	r2, [pc, #176]	; (800059c <MX_GPIO_Init+0xcc>)
 80004ea:	f043 0310 	orr.w	r3, r3, #16
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b2a      	ldr	r3, [pc, #168]	; (800059c <MX_GPIO_Init+0xcc>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0310 	and.w	r3, r3, #16
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004fc:	4b27      	ldr	r3, [pc, #156]	; (800059c <MX_GPIO_Init+0xcc>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a26      	ldr	r2, [pc, #152]	; (800059c <MX_GPIO_Init+0xcc>)
 8000502:	f043 0320 	orr.w	r3, r3, #32
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <MX_GPIO_Init+0xcc>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0320 	and.w	r3, r3, #32
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000514:	4b21      	ldr	r3, [pc, #132]	; (800059c <MX_GPIO_Init+0xcc>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a20      	ldr	r2, [pc, #128]	; (800059c <MX_GPIO_Init+0xcc>)
 800051a:	f043 0304 	orr.w	r3, r3, #4
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_GPIO_Init+0xcc>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0304 	and.w	r3, r3, #4
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_GPIO_Init+0xcc>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a1a      	ldr	r2, [pc, #104]	; (800059c <MX_GPIO_Init+0xcc>)
 8000532:	f043 0308 	orr.w	r3, r3, #8
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_GPIO_Init+0xcc>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0308 	and.w	r3, r3, #8
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2120      	movs	r1, #32
 8000548:	4815      	ldr	r0, [pc, #84]	; (80005a0 <MX_GPIO_Init+0xd0>)
 800054a:	f000 fc4f 	bl	8000dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800054e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4619      	mov	r1, r3
 8000562:	4811      	ldr	r0, [pc, #68]	; (80005a8 <MX_GPIO_Init+0xd8>)
 8000564:	f000 fabe 	bl	8000ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000568:	2320      	movs	r3, #32
 800056a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2302      	movs	r3, #2
 8000576:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	4619      	mov	r1, r3
 800057e:	4808      	ldr	r0, [pc, #32]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000580:	f000 fab0 	bl	8000ae4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2100      	movs	r1, #0
 8000588:	2028      	movs	r0, #40	; 0x28
 800058a:	f000 fa74 	bl	8000a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800058e:	2028      	movs	r0, #40	; 0x28
 8000590:	f000 fa8d 	bl	8000aae <HAL_NVIC_EnableIRQ>

}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021000 	.word	0x40021000
 80005a0:	40010800 	.word	0x40010800
 80005a4:	10110000 	.word	0x10110000
 80005a8:	40011000 	.word	0x40011000

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
}
 80005b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <Error_Handler+0x8>
	...

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <HAL_MspInit+0x5c>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a14      	ldr	r2, [pc, #80]	; (8000614 <HAL_MspInit+0x5c>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_MspInit+0x5c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_MspInit+0x5c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <HAL_MspInit+0x5c>)
 80005dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e0:	61d3      	str	r3, [r2, #28]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_MspInit+0x5c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_MspInit+0x60>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <HAL_MspInit+0x60>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000
 8000618:	40010000 	.word	0x40010000

0800061c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a15      	ldr	r2, [pc, #84]	; (800068c <HAL_UART_MspInit+0x70>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d123      	bne.n	8000684 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <HAL_UART_MspInit+0x74>)
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	4a13      	ldr	r2, [pc, #76]	; (8000690 <HAL_UART_MspInit+0x74>)
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000646:	61d3      	str	r3, [r2, #28]
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <HAL_UART_MspInit+0x74>)
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <HAL_UART_MspInit+0x74>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <HAL_UART_MspInit+0x74>)
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <HAL_UART_MspInit+0x74>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0304 	and.w	r3, r3, #4
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800066c:	230c      	movs	r3, #12
 800066e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000670:	2302      	movs	r3, #2
 8000672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2302      	movs	r3, #2
 8000676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4619      	mov	r1, r3
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <HAL_UART_MspInit+0x78>)
 8000680:	f000 fa30 	bl	8000ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40004400 	.word	0x40004400
 8000690:	40021000 	.word	0x40021000
 8000694:	40010800 	.word	0x40010800

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	e7fe      	b.n	800069c <NMI_Handler+0x4>

0800069e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <MemManage_Handler+0x4>

080006aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <BusFault_Handler+0x4>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <UsageFault_Handler+0x4>

080006b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr

080006ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr

080006da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006de:	f000 f8b3 	bl	8000848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006ea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006ee:	f000 fb95 	bl	8000e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000700:	4a14      	ldr	r2, [pc, #80]	; (8000754 <_sbrk+0x5c>)
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <_sbrk+0x60>)
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <_sbrk+0x64>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d102      	bne.n	800071a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <_sbrk+0x64>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <_sbrk+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <_sbrk+0x64>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	429a      	cmp	r2, r3
 8000726:	d207      	bcs.n	8000738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000728:	f001 f96c 	bl	8001a04 <__errno>
 800072c:	4603      	mov	r3, r0
 800072e:	220c      	movs	r2, #12
 8000730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000732:	f04f 33ff 	mov.w	r3, #4294967295
 8000736:	e009      	b.n	800074c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <_sbrk+0x64>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800073e:	4b07      	ldr	r3, [pc, #28]	; (800075c <_sbrk+0x64>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	4a05      	ldr	r2, [pc, #20]	; (800075c <_sbrk+0x64>)
 8000748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800074a:	68fb      	ldr	r3, [r7, #12]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20005000 	.word	0x20005000
 8000758:	00000400 	.word	0x00000400
 800075c:	200000f0 	.word	0x200000f0
 8000760:	20000158 	.word	0x20000158

08000764 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000772:	490d      	ldr	r1, [pc, #52]	; (80007a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000774:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000788:	4c0a      	ldr	r4, [pc, #40]	; (80007b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000796:	f7ff ffe5 	bl	8000764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079a:	f001 f939 	bl	8001a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800079e:	f7ff fd21 	bl	80001e4 <main>
  bx lr
 80007a2:	4770      	bx	lr
  ldr r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007ac:	0800239c 	.word	0x0800239c
  ldr r2, =_sbss
 80007b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007b4:	20000154 	.word	0x20000154

080007b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC1_2_IRQHandler>
	...

080007bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <HAL_Init+0x28>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a07      	ldr	r2, [pc, #28]	; (80007e4 <HAL_Init+0x28>)
 80007c6:	f043 0310 	orr.w	r3, r3, #16
 80007ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007cc:	2003      	movs	r0, #3
 80007ce:	f000 f947 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 f808 	bl	80007e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d8:	f7ff feee 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40022000 	.word	0x40022000

080007e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_InitTick+0x54>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_InitTick+0x58>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000802:	fbb2 f3f3 	udiv	r3, r2, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f95f 	bl	8000aca <HAL_SYSTICK_Config>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	e00e      	b.n	8000834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b0f      	cmp	r3, #15
 800081a:	d80a      	bhi.n	8000832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800081c:	2200      	movs	r2, #0
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	f04f 30ff 	mov.w	r0, #4294967295
 8000824:	f000 f927 	bl	8000a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000828:	4a06      	ldr	r2, [pc, #24]	; (8000844 <HAL_InitTick+0x5c>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
 8000830:	e000      	b.n	8000834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000000 	.word	0x20000000
 8000840:	20000008 	.word	0x20000008
 8000844:	20000004 	.word	0x20000004

08000848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_IncTick+0x1c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <HAL_IncTick+0x20>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	4a03      	ldr	r2, [pc, #12]	; (8000868 <HAL_IncTick+0x20>)
 800085a:	6013      	str	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	20000008 	.word	0x20000008
 8000868:	20000140 	.word	0x20000140

0800086c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return uwTick;
 8000870:	4b02      	ldr	r3, [pc, #8]	; (800087c <HAL_GetTick+0x10>)
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	20000140 	.word	0x20000140

08000880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000888:	f7ff fff0 	bl	800086c <HAL_GetTick>
 800088c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000898:	d005      	beq.n	80008a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <HAL_Delay+0x44>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	4413      	add	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008a6:	bf00      	nop
 80008a8:	f7ff ffe0 	bl	800086c <HAL_GetTick>
 80008ac:	4602      	mov	r2, r0
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d8f7      	bhi.n	80008a8 <HAL_Delay+0x28>
  {
  }
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000008 	.word	0x20000008

080008c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <__NVIC_GetPriorityGrouping+0x18>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	0a1b      	lsrs	r3, r3, #8
 800091a:	f003 0307 	and.w	r3, r3, #7
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	2b00      	cmp	r3, #0
 800093c:	db0b      	blt.n	8000956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	f003 021f 	and.w	r2, r3, #31
 8000944:	4906      	ldr	r1, [pc, #24]	; (8000960 <__NVIC_EnableIRQ+0x34>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	095b      	lsrs	r3, r3, #5
 800094c:	2001      	movs	r0, #1
 800094e:	fa00 f202 	lsl.w	r2, r0, r2
 8000952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	e000e100 	.word	0xe000e100

08000964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	db0a      	blt.n	800098e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	b2da      	uxtb	r2, r3
 800097c:	490c      	ldr	r1, [pc, #48]	; (80009b0 <__NVIC_SetPriority+0x4c>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	0112      	lsls	r2, r2, #4
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	440b      	add	r3, r1
 8000988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800098c:	e00a      	b.n	80009a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4908      	ldr	r1, [pc, #32]	; (80009b4 <__NVIC_SetPriority+0x50>)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 030f 	and.w	r3, r3, #15
 800099a:	3b04      	subs	r3, #4
 800099c:	0112      	lsls	r2, r2, #4
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	440b      	add	r3, r1
 80009a2:	761a      	strb	r2, [r3, #24]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f1c3 0307 	rsb	r3, r3, #7
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	bf28      	it	cs
 80009d6:	2304      	movcs	r3, #4
 80009d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3304      	adds	r3, #4
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d902      	bls.n	80009e8 <NVIC_EncodePriority+0x30>
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3b03      	subs	r3, #3
 80009e6:	e000      	b.n	80009ea <NVIC_EncodePriority+0x32>
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	f04f 32ff 	mov.w	r2, #4294967295
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43da      	mvns	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	401a      	ands	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43d9      	mvns	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	4313      	orrs	r3, r2
         );
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3724      	adds	r7, #36	; 0x24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a2c:	d301      	bcc.n	8000a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00f      	b.n	8000a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <SysTick_Config+0x40>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3a:	210f      	movs	r1, #15
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	f7ff ff90 	bl	8000964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <SysTick_Config+0x40>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SysTick_Config+0x40>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff2d 	bl	80008c8 <__NVIC_SetPriorityGrouping>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a88:	f7ff ff42 	bl	8000910 <__NVIC_GetPriorityGrouping>
 8000a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	6978      	ldr	r0, [r7, #20]
 8000a94:	f7ff ff90 	bl	80009b8 <NVIC_EncodePriority>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff5f 	bl	8000964 <__NVIC_SetPriority>
}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff35 	bl	800092c <__NVIC_EnableIRQ>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff ffa2 	bl	8000a1c <SysTick_Config>
 8000ad8:	4603      	mov	r3, r0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b08b      	sub	sp, #44	; 0x2c
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af6:	e169      	b.n	8000dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000af8:	2201      	movs	r2, #1
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	69fa      	ldr	r2, [r7, #28]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	f040 8158 	bne.w	8000dc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	4a9a      	ldr	r2, [pc, #616]	; (8000d84 <HAL_GPIO_Init+0x2a0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d05e      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b20:	4a98      	ldr	r2, [pc, #608]	; (8000d84 <HAL_GPIO_Init+0x2a0>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d875      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b26:	4a98      	ldr	r2, [pc, #608]	; (8000d88 <HAL_GPIO_Init+0x2a4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d058      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b2c:	4a96      	ldr	r2, [pc, #600]	; (8000d88 <HAL_GPIO_Init+0x2a4>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d86f      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b32:	4a96      	ldr	r2, [pc, #600]	; (8000d8c <HAL_GPIO_Init+0x2a8>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d052      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b38:	4a94      	ldr	r2, [pc, #592]	; (8000d8c <HAL_GPIO_Init+0x2a8>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d869      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b3e:	4a94      	ldr	r2, [pc, #592]	; (8000d90 <HAL_GPIO_Init+0x2ac>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d04c      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b44:	4a92      	ldr	r2, [pc, #584]	; (8000d90 <HAL_GPIO_Init+0x2ac>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d863      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b4a:	4a92      	ldr	r2, [pc, #584]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d046      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b50:	4a90      	ldr	r2, [pc, #576]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d85d      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b56:	2b12      	cmp	r3, #18
 8000b58:	d82a      	bhi.n	8000bb0 <HAL_GPIO_Init+0xcc>
 8000b5a:	2b12      	cmp	r3, #18
 8000b5c:	d859      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b5e:	a201      	add	r2, pc, #4	; (adr r2, 8000b64 <HAL_GPIO_Init+0x80>)
 8000b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b64:	08000bdf 	.word	0x08000bdf
 8000b68:	08000bb9 	.word	0x08000bb9
 8000b6c:	08000bcb 	.word	0x08000bcb
 8000b70:	08000c0d 	.word	0x08000c0d
 8000b74:	08000c13 	.word	0x08000c13
 8000b78:	08000c13 	.word	0x08000c13
 8000b7c:	08000c13 	.word	0x08000c13
 8000b80:	08000c13 	.word	0x08000c13
 8000b84:	08000c13 	.word	0x08000c13
 8000b88:	08000c13 	.word	0x08000c13
 8000b8c:	08000c13 	.word	0x08000c13
 8000b90:	08000c13 	.word	0x08000c13
 8000b94:	08000c13 	.word	0x08000c13
 8000b98:	08000c13 	.word	0x08000c13
 8000b9c:	08000c13 	.word	0x08000c13
 8000ba0:	08000c13 	.word	0x08000c13
 8000ba4:	08000c13 	.word	0x08000c13
 8000ba8:	08000bc1 	.word	0x08000bc1
 8000bac:	08000bd5 	.word	0x08000bd5
 8000bb0:	4a79      	ldr	r2, [pc, #484]	; (8000d98 <HAL_GPIO_Init+0x2b4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d013      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bb6:	e02c      	b.n	8000c12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	623b      	str	r3, [r7, #32]
          break;
 8000bbe:	e029      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	623b      	str	r3, [r7, #32]
          break;
 8000bc8:	e024      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	3308      	adds	r3, #8
 8000bd0:	623b      	str	r3, [r7, #32]
          break;
 8000bd2:	e01f      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	330c      	adds	r3, #12
 8000bda:	623b      	str	r3, [r7, #32]
          break;
 8000bdc:	e01a      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000be6:	2304      	movs	r3, #4
 8000be8:	623b      	str	r3, [r7, #32]
          break;
 8000bea:	e013      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d105      	bne.n	8000c00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69fa      	ldr	r2, [r7, #28]
 8000bfc:	611a      	str	r2, [r3, #16]
          break;
 8000bfe:	e009      	b.n	8000c14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c00:	2308      	movs	r3, #8
 8000c02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	615a      	str	r2, [r3, #20]
          break;
 8000c0a:	e003      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
          break;
 8000c10:	e000      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          break;
 8000c12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	2bff      	cmp	r3, #255	; 0xff
 8000c18:	d801      	bhi.n	8000c1e <HAL_GPIO_Init+0x13a>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	e001      	b.n	8000c22 <HAL_GPIO_Init+0x13e>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3304      	adds	r3, #4
 8000c22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	2bff      	cmp	r3, #255	; 0xff
 8000c28:	d802      	bhi.n	8000c30 <HAL_GPIO_Init+0x14c>
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	e002      	b.n	8000c36 <HAL_GPIO_Init+0x152>
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	3b08      	subs	r3, #8
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	210f      	movs	r1, #15
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	401a      	ands	r2, r3
 8000c48:	6a39      	ldr	r1, [r7, #32]
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	431a      	orrs	r2, r3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 80b1 	beq.w	8000dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c64:	4b4d      	ldr	r3, [pc, #308]	; (8000d9c <HAL_GPIO_Init+0x2b8>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a4c      	ldr	r2, [pc, #304]	; (8000d9c <HAL_GPIO_Init+0x2b8>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b4a      	ldr	r3, [pc, #296]	; (8000d9c <HAL_GPIO_Init+0x2b8>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c7c:	4a48      	ldr	r2, [pc, #288]	; (8000da0 <HAL_GPIO_Init+0x2bc>)
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	089b      	lsrs	r3, r3, #2
 8000c82:	3302      	adds	r3, #2
 8000c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	220f      	movs	r2, #15
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a40      	ldr	r2, [pc, #256]	; (8000da4 <HAL_GPIO_Init+0x2c0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d013      	beq.n	8000cd0 <HAL_GPIO_Init+0x1ec>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a3f      	ldr	r2, [pc, #252]	; (8000da8 <HAL_GPIO_Init+0x2c4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d00d      	beq.n	8000ccc <HAL_GPIO_Init+0x1e8>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a3e      	ldr	r2, [pc, #248]	; (8000dac <HAL_GPIO_Init+0x2c8>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d007      	beq.n	8000cc8 <HAL_GPIO_Init+0x1e4>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a3d      	ldr	r2, [pc, #244]	; (8000db0 <HAL_GPIO_Init+0x2cc>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d101      	bne.n	8000cc4 <HAL_GPIO_Init+0x1e0>
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e006      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	e004      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	e002      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e000      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd4:	f002 0203 	and.w	r2, r2, #3
 8000cd8:	0092      	lsls	r2, r2, #2
 8000cda:	4093      	lsls	r3, r2
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ce2:	492f      	ldr	r1, [pc, #188]	; (8000da0 <HAL_GPIO_Init+0x2bc>)
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	3302      	adds	r3, #2
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d006      	beq.n	8000d0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cfc:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	492c      	ldr	r1, [pc, #176]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	600b      	str	r3, [r1, #0]
 8000d08:	e006      	b.n	8000d18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	43db      	mvns	r3, r3
 8000d12:	4928      	ldr	r1, [pc, #160]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	4922      	ldr	r1, [pc, #136]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	604b      	str	r3, [r1, #4]
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	491e      	ldr	r1, [pc, #120]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d006      	beq.n	8000d5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	4918      	ldr	r1, [pc, #96]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	608b      	str	r3, [r1, #8]
 8000d58:	e006      	b.n	8000d68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	4914      	ldr	r1, [pc, #80]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d021      	beq.n	8000db8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	490e      	ldr	r1, [pc, #56]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	60cb      	str	r3, [r1, #12]
 8000d80:	e021      	b.n	8000dc6 <HAL_GPIO_Init+0x2e2>
 8000d82:	bf00      	nop
 8000d84:	10320000 	.word	0x10320000
 8000d88:	10310000 	.word	0x10310000
 8000d8c:	10220000 	.word	0x10220000
 8000d90:	10210000 	.word	0x10210000
 8000d94:	10120000 	.word	0x10120000
 8000d98:	10110000 	.word	0x10110000
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010000 	.word	0x40010000
 8000da4:	40010800 	.word	0x40010800
 8000da8:	40010c00 	.word	0x40010c00
 8000dac:	40011000 	.word	0x40011000
 8000db0:	40011400 	.word	0x40011400
 8000db4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_GPIO_Init+0x304>)
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	4909      	ldr	r1, [pc, #36]	; (8000de8 <HAL_GPIO_Init+0x304>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	3301      	adds	r3, #1
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f47f ae8e 	bne.w	8000af8 <HAL_GPIO_Init+0x14>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	372c      	adds	r7, #44	; 0x2c
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	40010400 	.word	0x40010400

08000dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	807b      	strh	r3, [r7, #2]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dfc:	787b      	ldrb	r3, [r7, #1]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e02:	887a      	ldrh	r2, [r7, #2]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e08:	e003      	b.n	8000e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e0a:	887b      	ldrh	r3, [r7, #2]
 8000e0c:	041a      	lsls	r2, r3, #16
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	611a      	str	r2, [r3, #16]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e28:	695a      	ldr	r2, [r3, #20]
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d006      	beq.n	8000e40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f806 	bl	8000e4c <HAL_GPIO_EXTI_Callback>
  }
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40010400 	.word	0x40010400

08000e4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e26c      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 8087 	beq.w	8000f8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e80:	4b92      	ldr	r3, [pc, #584]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 030c 	and.w	r3, r3, #12
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d00c      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e8c:	4b8f      	ldr	r3, [pc, #572]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 030c 	and.w	r3, r3, #12
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d112      	bne.n	8000ebe <HAL_RCC_OscConfig+0x5e>
 8000e98:	4b8c      	ldr	r3, [pc, #560]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea4:	d10b      	bne.n	8000ebe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea6:	4b89      	ldr	r3, [pc, #548]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d06c      	beq.n	8000f8c <HAL_RCC_OscConfig+0x12c>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d168      	bne.n	8000f8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e246      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec6:	d106      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x76>
 8000ec8:	4b80      	ldr	r3, [pc, #512]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a7f      	ldr	r2, [pc, #508]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	e02e      	b.n	8000f34 <HAL_RCC_OscConfig+0xd4>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x98>
 8000ede:	4b7b      	ldr	r3, [pc, #492]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a7a      	ldr	r2, [pc, #488]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b78      	ldr	r3, [pc, #480]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a77      	ldr	r2, [pc, #476]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e01d      	b.n	8000f34 <HAL_RCC_OscConfig+0xd4>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f00:	d10c      	bne.n	8000f1c <HAL_RCC_OscConfig+0xbc>
 8000f02:	4b72      	ldr	r3, [pc, #456]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a71      	ldr	r2, [pc, #452]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	4b6f      	ldr	r3, [pc, #444]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a6e      	ldr	r2, [pc, #440]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	e00b      	b.n	8000f34 <HAL_RCC_OscConfig+0xd4>
 8000f1c:	4b6b      	ldr	r3, [pc, #428]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a6a      	ldr	r2, [pc, #424]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b68      	ldr	r3, [pc, #416]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a67      	ldr	r2, [pc, #412]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d013      	beq.n	8000f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fc96 	bl	800086c <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f42:	e008      	b.n	8000f56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f44:	f7ff fc92 	bl	800086c <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b64      	cmp	r3, #100	; 0x64
 8000f50:	d901      	bls.n	8000f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e1fa      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f56:	4b5d      	ldr	r3, [pc, #372]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f0      	beq.n	8000f44 <HAL_RCC_OscConfig+0xe4>
 8000f62:	e014      	b.n	8000f8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f64:	f7ff fc82 	bl	800086c <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f6c:	f7ff fc7e 	bl	800086c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b64      	cmp	r3, #100	; 0x64
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e1e6      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7e:	4b53      	ldr	r3, [pc, #332]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1f0      	bne.n	8000f6c <HAL_RCC_OscConfig+0x10c>
 8000f8a:	e000      	b.n	8000f8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d063      	beq.n	8001062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f9a:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d00b      	beq.n	8000fbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fa6:	4b49      	ldr	r3, [pc, #292]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 030c 	and.w	r3, r3, #12
 8000fae:	2b08      	cmp	r3, #8
 8000fb0:	d11c      	bne.n	8000fec <HAL_RCC_OscConfig+0x18c>
 8000fb2:	4b46      	ldr	r3, [pc, #280]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d116      	bne.n	8000fec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fbe:	4b43      	ldr	r3, [pc, #268]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d005      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x176>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d001      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e1ba      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd6:	4b3d      	ldr	r3, [pc, #244]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4939      	ldr	r1, [pc, #228]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fea:	e03a      	b.n	8001062 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d020      	beq.n	8001036 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ff4:	4b36      	ldr	r3, [pc, #216]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffa:	f7ff fc37 	bl	800086c <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001000:	e008      	b.n	8001014 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001002:	f7ff fc33 	bl	800086c <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e19b      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001014:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0f0      	beq.n	8001002 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001020:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4927      	ldr	r1, [pc, #156]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8001030:	4313      	orrs	r3, r2
 8001032:	600b      	str	r3, [r1, #0]
 8001034:	e015      	b.n	8001062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fc16 	bl	800086c <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001044:	f7ff fc12 	bl	800086c <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e17a      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001056:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f0      	bne.n	8001044 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b00      	cmp	r3, #0
 800106c:	d03a      	beq.n	80010e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d019      	beq.n	80010aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <HAL_RCC_OscConfig+0x274>)
 8001078:	2201      	movs	r2, #1
 800107a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107c:	f7ff fbf6 	bl	800086c <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001084:	f7ff fbf2 	bl	800086c <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e15a      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_RCC_OscConfig+0x26c>)
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f0      	beq.n	8001084 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f000 fad8 	bl	8001658 <RCC_Delay>
 80010a8:	e01c      	b.n	80010e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_RCC_OscConfig+0x274>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b0:	f7ff fbdc 	bl	800086c <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b6:	e00f      	b.n	80010d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b8:	f7ff fbd8 	bl	800086c <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d908      	bls.n	80010d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e140      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	42420000 	.word	0x42420000
 80010d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d8:	4b9e      	ldr	r3, [pc, #632]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1e9      	bne.n	80010b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 80a6 	beq.w	800123e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010f6:	4b97      	ldr	r3, [pc, #604]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10d      	bne.n	800111e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	4b94      	ldr	r3, [pc, #592]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a93      	ldr	r2, [pc, #588]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	61d3      	str	r3, [r2, #28]
 800110e:	4b91      	ldr	r3, [pc, #580]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800111a:	2301      	movs	r3, #1
 800111c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800111e:	4b8e      	ldr	r3, [pc, #568]	; (8001358 <HAL_RCC_OscConfig+0x4f8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001126:	2b00      	cmp	r3, #0
 8001128:	d118      	bne.n	800115c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800112a:	4b8b      	ldr	r3, [pc, #556]	; (8001358 <HAL_RCC_OscConfig+0x4f8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a8a      	ldr	r2, [pc, #552]	; (8001358 <HAL_RCC_OscConfig+0x4f8>)
 8001130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001136:	f7ff fb99 	bl	800086c <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800113e:	f7ff fb95 	bl	800086c <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b64      	cmp	r3, #100	; 0x64
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e0fd      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001150:	4b81      	ldr	r3, [pc, #516]	; (8001358 <HAL_RCC_OscConfig+0x4f8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d106      	bne.n	8001172 <HAL_RCC_OscConfig+0x312>
 8001164:	4b7b      	ldr	r3, [pc, #492]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	4a7a      	ldr	r2, [pc, #488]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6213      	str	r3, [r2, #32]
 8001170:	e02d      	b.n	80011ce <HAL_RCC_OscConfig+0x36e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0x334>
 800117a:	4b76      	ldr	r3, [pc, #472]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4a75      	ldr	r2, [pc, #468]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 8001180:	f023 0301 	bic.w	r3, r3, #1
 8001184:	6213      	str	r3, [r2, #32]
 8001186:	4b73      	ldr	r3, [pc, #460]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	4a72      	ldr	r2, [pc, #456]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 800118c:	f023 0304 	bic.w	r3, r3, #4
 8001190:	6213      	str	r3, [r2, #32]
 8001192:	e01c      	b.n	80011ce <HAL_RCC_OscConfig+0x36e>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	2b05      	cmp	r3, #5
 800119a:	d10c      	bne.n	80011b6 <HAL_RCC_OscConfig+0x356>
 800119c:	4b6d      	ldr	r3, [pc, #436]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	4a6c      	ldr	r2, [pc, #432]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	6213      	str	r3, [r2, #32]
 80011a8:	4b6a      	ldr	r3, [pc, #424]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	4a69      	ldr	r2, [pc, #420]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6213      	str	r3, [r2, #32]
 80011b4:	e00b      	b.n	80011ce <HAL_RCC_OscConfig+0x36e>
 80011b6:	4b67      	ldr	r3, [pc, #412]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	4a66      	ldr	r2, [pc, #408]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	f023 0301 	bic.w	r3, r3, #1
 80011c0:	6213      	str	r3, [r2, #32]
 80011c2:	4b64      	ldr	r3, [pc, #400]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	4a63      	ldr	r2, [pc, #396]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 80011c8:	f023 0304 	bic.w	r3, r3, #4
 80011cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d015      	beq.n	8001202 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fb49 	bl	800086c <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011dc:	e00a      	b.n	80011f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011de:	f7ff fb45 	bl	800086c <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e0ab      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f4:	4b57      	ldr	r3, [pc, #348]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0ee      	beq.n	80011de <HAL_RCC_OscConfig+0x37e>
 8001200:	e014      	b.n	800122c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001202:	f7ff fb33 	bl	800086c <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001208:	e00a      	b.n	8001220 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120a:	f7ff fb2f 	bl	800086c <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	f241 3288 	movw	r2, #5000	; 0x1388
 8001218:	4293      	cmp	r3, r2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e095      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001220:	4b4c      	ldr	r3, [pc, #304]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1ee      	bne.n	800120a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d105      	bne.n	800123e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001232:	4b48      	ldr	r3, [pc, #288]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a47      	ldr	r2, [pc, #284]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 8001238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800123c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 8081 	beq.w	800134a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001248:	4b42      	ldr	r3, [pc, #264]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b08      	cmp	r3, #8
 8001252:	d061      	beq.n	8001318 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d146      	bne.n	80012ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800125c:	4b3f      	ldr	r3, [pc, #252]	; (800135c <HAL_RCC_OscConfig+0x4fc>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001262:	f7ff fb03 	bl	800086c <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800126a:	f7ff faff 	bl	800086c <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e067      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127c:	4b35      	ldr	r3, [pc, #212]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f0      	bne.n	800126a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001290:	d108      	bne.n	80012a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001292:	4b30      	ldr	r3, [pc, #192]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	492d      	ldr	r1, [pc, #180]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a19      	ldr	r1, [r3, #32]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	430b      	orrs	r3, r1
 80012b6:	4927      	ldr	r1, [pc, #156]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <HAL_RCC_OscConfig+0x4fc>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7ff fad3 	bl	800086c <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ca:	f7ff facf 	bl	800086c <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e037      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x46a>
 80012e8:	e02f      	b.n	800134a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <HAL_RCC_OscConfig+0x4fc>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fabc 	bl	800086c <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f8:	f7ff fab8 	bl	800086c <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e020      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x498>
 8001316:	e018      	b.n	800134a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e013      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_RCC_OscConfig+0x4f4>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	429a      	cmp	r2, r3
 8001336:	d106      	bne.n	8001346 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001342:	429a      	cmp	r2, r3
 8001344:	d001      	beq.n	800134a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	40007000 	.word	0x40007000
 800135c:	42420060 	.word	0x42420060

08001360 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e0d0      	b.n	8001516 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001374:	4b6a      	ldr	r3, [pc, #424]	; (8001520 <HAL_RCC_ClockConfig+0x1c0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d910      	bls.n	80013a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	4b67      	ldr	r3, [pc, #412]	; (8001520 <HAL_RCC_ClockConfig+0x1c0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 0207 	bic.w	r2, r3, #7
 800138a:	4965      	ldr	r1, [pc, #404]	; (8001520 <HAL_RCC_ClockConfig+0x1c0>)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	4b63      	ldr	r3, [pc, #396]	; (8001520 <HAL_RCC_ClockConfig+0x1c0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0b8      	b.n	8001516 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d020      	beq.n	80013f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013bc:	4b59      	ldr	r3, [pc, #356]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	4a58      	ldr	r2, [pc, #352]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 80013c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d005      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013d4:	4b53      	ldr	r3, [pc, #332]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4a52      	ldr	r2, [pc, #328]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013e0:	4b50      	ldr	r3, [pc, #320]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	494d      	ldr	r1, [pc, #308]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d040      	beq.n	8001480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d107      	bne.n	8001416 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	4b47      	ldr	r3, [pc, #284]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d115      	bne.n	800143e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e07f      	b.n	8001516 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d107      	bne.n	800142e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141e:	4b41      	ldr	r3, [pc, #260]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d109      	bne.n	800143e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e073      	b.n	8001516 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142e:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e06b      	b.n	8001516 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800143e:	4b39      	ldr	r3, [pc, #228]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f023 0203 	bic.w	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4936      	ldr	r1, [pc, #216]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001450:	f7ff fa0c 	bl	800086c <HAL_GetTick>
 8001454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001456:	e00a      	b.n	800146e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001458:	f7ff fa08 	bl	800086c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f241 3288 	movw	r2, #5000	; 0x1388
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e053      	b.n	8001516 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 020c 	and.w	r2, r3, #12
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	429a      	cmp	r2, r3
 800147e:	d1eb      	bne.n	8001458 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001480:	4b27      	ldr	r3, [pc, #156]	; (8001520 <HAL_RCC_ClockConfig+0x1c0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d210      	bcs.n	80014b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148e:	4b24      	ldr	r3, [pc, #144]	; (8001520 <HAL_RCC_ClockConfig+0x1c0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 0207 	bic.w	r2, r3, #7
 8001496:	4922      	ldr	r1, [pc, #136]	; (8001520 <HAL_RCC_ClockConfig+0x1c0>)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_RCC_ClockConfig+0x1c0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d001      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e032      	b.n	8001516 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d008      	beq.n	80014ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014bc:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	4916      	ldr	r1, [pc, #88]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d009      	beq.n	80014ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	490e      	ldr	r1, [pc, #56]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014ee:	f000 f821 	bl	8001534 <HAL_RCC_GetSysClockFreq>
 80014f2:	4602      	mov	r2, r0
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	091b      	lsrs	r3, r3, #4
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	490a      	ldr	r1, [pc, #40]	; (8001528 <HAL_RCC_ClockConfig+0x1c8>)
 8001500:	5ccb      	ldrb	r3, [r1, r3]
 8001502:	fa22 f303 	lsr.w	r3, r2, r3
 8001506:	4a09      	ldr	r2, [pc, #36]	; (800152c <HAL_RCC_ClockConfig+0x1cc>)
 8001508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_RCC_ClockConfig+0x1d0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f96a 	bl	80007e8 <HAL_InitTick>

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40022000 	.word	0x40022000
 8001524:	40021000 	.word	0x40021000
 8001528:	08002348 	.word	0x08002348
 800152c:	20000000 	.word	0x20000000
 8001530:	20000004 	.word	0x20000004

08001534 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001534:	b490      	push	{r4, r7}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800153a:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800153c:	1d3c      	adds	r4, r7, #4
 800153e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001540:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001544:	f240 2301 	movw	r3, #513	; 0x201
 8001548:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	2b04      	cmp	r3, #4
 800156c:	d002      	beq.n	8001574 <HAL_RCC_GetSysClockFreq+0x40>
 800156e:	2b08      	cmp	r3, #8
 8001570:	d003      	beq.n	800157a <HAL_RCC_GetSysClockFreq+0x46>
 8001572:	e02d      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001576:	623b      	str	r3, [r7, #32]
      break;
 8001578:	e02d      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	0c9b      	lsrs	r3, r3, #18
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001586:	4413      	add	r3, r2
 8001588:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800158c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d013      	beq.n	80015c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	0c5b      	lsrs	r3, r3, #17
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015a6:	4413      	add	r3, r2
 80015a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80015b2:	fb02 f203 	mul.w	r2, r2, r3
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
 80015be:	e004      	b.n	80015ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015c4:	fb02 f303 	mul.w	r3, r2, r3
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	623b      	str	r3, [r7, #32]
      break;
 80015ce:	e002      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80015d2:	623b      	str	r3, [r7, #32]
      break;
 80015d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015d6:	6a3b      	ldr	r3, [r7, #32]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3728      	adds	r7, #40	; 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc90      	pop	{r4, r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	08002338 	.word	0x08002338
 80015e8:	40021000 	.word	0x40021000
 80015ec:	007a1200 	.word	0x007a1200
 80015f0:	003d0900 	.word	0x003d0900

080015f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015f8:	4b02      	ldr	r3, [pc, #8]	; (8001604 <HAL_RCC_GetHCLKFreq+0x10>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	20000000 	.word	0x20000000

08001608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800160c:	f7ff fff2 	bl	80015f4 <HAL_RCC_GetHCLKFreq>
 8001610:	4602      	mov	r2, r0
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	4903      	ldr	r1, [pc, #12]	; (800162c <HAL_RCC_GetPCLK1Freq+0x24>)
 800161e:	5ccb      	ldrb	r3, [r1, r3]
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001624:	4618      	mov	r0, r3
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40021000 	.word	0x40021000
 800162c:	08002358 	.word	0x08002358

08001630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001634:	f7ff ffde 	bl	80015f4 <HAL_RCC_GetHCLKFreq>
 8001638:	4602      	mov	r2, r0
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	0adb      	lsrs	r3, r3, #11
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	4903      	ldr	r1, [pc, #12]	; (8001654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001646:	5ccb      	ldrb	r3, [r1, r3]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800164c:	4618      	mov	r0, r3
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000
 8001654:	08002358 	.word	0x08002358

08001658 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <RCC_Delay+0x34>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <RCC_Delay+0x38>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	0a5b      	lsrs	r3, r3, #9
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001674:	bf00      	nop
  }
  while (Delay --);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1e5a      	subs	r2, r3, #1
 800167a:	60fa      	str	r2, [r7, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f9      	bne.n	8001674 <RCC_Delay+0x1c>
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	20000000 	.word	0x20000000
 8001690:	10624dd3 	.word	0x10624dd3

08001694 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e03f      	b.n	8001726 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d106      	bne.n	80016c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7fe ffae 	bl	800061c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2224      	movs	r2, #36	; 0x24
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f905 	bl	80018e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	695a      	ldr	r2, [r3, #20]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800170c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2220      	movs	r2, #32
 8001718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2220      	movs	r2, #32
 8001720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b08a      	sub	sp, #40	; 0x28
 8001732:	af02      	add	r7, sp, #8
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	4613      	mov	r3, r2
 800173c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b20      	cmp	r3, #32
 800174c:	d17c      	bne.n	8001848 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d002      	beq.n	800175a <HAL_UART_Transmit+0x2c>
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e075      	b.n	800184a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_UART_Transmit+0x3e>
 8001768:	2302      	movs	r3, #2
 800176a:	e06e      	b.n	800184a <HAL_UART_Transmit+0x11c>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2221      	movs	r2, #33	; 0x21
 800177e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001782:	f7ff f873 	bl	800086c <HAL_GetTick>
 8001786:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	88fa      	ldrh	r2, [r7, #6]
 800178c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	88fa      	ldrh	r2, [r7, #6]
 8001792:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800179c:	d108      	bne.n	80017b0 <HAL_UART_Transmit+0x82>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d104      	bne.n	80017b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	e003      	b.n	80017b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80017c0:	e02a      	b.n	8001818 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2200      	movs	r2, #0
 80017ca:	2180      	movs	r1, #128	; 0x80
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 f840 	bl	8001852 <UART_WaitOnFlagUntilTimeout>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e036      	b.n	800184a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10b      	bne.n	80017fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	3302      	adds	r3, #2
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	e007      	b.n	800180a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	781a      	ldrb	r2, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	3301      	adds	r3, #1
 8001808:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800180e:	b29b      	uxth	r3, r3
 8001810:	3b01      	subs	r3, #1
 8001812:	b29a      	uxth	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800181c:	b29b      	uxth	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1cf      	bne.n	80017c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2200      	movs	r2, #0
 800182a:	2140      	movs	r1, #64	; 0x40
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f000 f810 	bl	8001852 <UART_WaitOnFlagUntilTimeout>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e006      	b.n	800184a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2220      	movs	r2, #32
 8001840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	e000      	b.n	800184a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001848:	2302      	movs	r3, #2
  }
}
 800184a:	4618      	mov	r0, r3
 800184c:	3720      	adds	r7, #32
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	4613      	mov	r3, r2
 8001860:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001862:	e02c      	b.n	80018be <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186a:	d028      	beq.n	80018be <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d007      	beq.n	8001882 <UART_WaitOnFlagUntilTimeout+0x30>
 8001872:	f7fe fffb 	bl	800086c <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	429a      	cmp	r2, r3
 8001880:	d21d      	bcs.n	80018be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001890:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	695a      	ldr	r2, [r3, #20]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0201 	bic.w	r2, r2, #1
 80018a0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2220      	movs	r2, #32
 80018a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2220      	movs	r2, #32
 80018ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e00f      	b.n	80018de <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	4013      	ands	r3, r2
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	bf0c      	ite	eq
 80018ce:	2301      	moveq	r3, #1
 80018d0:	2300      	movne	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d0c3      	beq.n	8001864 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	4313      	orrs	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001922:	f023 030c 	bic.w	r3, r3, #12
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	430b      	orrs	r3, r1
 800192e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a2c      	ldr	r2, [pc, #176]	; (80019fc <UART_SetConfig+0x114>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d103      	bne.n	8001958 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001950:	f7ff fe6e 	bl	8001630 <HAL_RCC_GetPCLK2Freq>
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	e002      	b.n	800195e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001958:	f7ff fe56 	bl	8001608 <HAL_RCC_GetPCLK1Freq>
 800195c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	009a      	lsls	r2, r3, #2
 8001968:	441a      	add	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	fbb2 f3f3 	udiv	r3, r2, r3
 8001974:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <UART_SetConfig+0x118>)
 8001976:	fba2 2303 	umull	r2, r3, r2, r3
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	0119      	lsls	r1, r3, #4
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	009a      	lsls	r2, r3, #2
 8001988:	441a      	add	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	fbb2 f2f3 	udiv	r2, r2, r3
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <UART_SetConfig+0x118>)
 8001996:	fba3 0302 	umull	r0, r3, r3, r2
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	2064      	movs	r0, #100	; 0x64
 800199e:	fb00 f303 	mul.w	r3, r0, r3
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	3332      	adds	r3, #50	; 0x32
 80019a8:	4a15      	ldr	r2, [pc, #84]	; (8001a00 <UART_SetConfig+0x118>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019b4:	4419      	add	r1, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	009a      	lsls	r2, r3, #2
 80019c0:	441a      	add	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <UART_SetConfig+0x118>)
 80019ce:	fba3 0302 	umull	r0, r3, r3, r2
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	2064      	movs	r0, #100	; 0x64
 80019d6:	fb00 f303 	mul.w	r3, r0, r3
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	3332      	adds	r3, #50	; 0x32
 80019e0:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <UART_SetConfig+0x118>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	f003 020f 	and.w	r2, r3, #15
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	440a      	add	r2, r1
 80019f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40013800 	.word	0x40013800
 8001a00:	51eb851f 	.word	0x51eb851f

08001a04 <__errno>:
 8001a04:	4b01      	ldr	r3, [pc, #4]	; (8001a0c <__errno+0x8>)
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	2000000c 	.word	0x2000000c

08001a10 <__libc_init_array>:
 8001a10:	b570      	push	{r4, r5, r6, lr}
 8001a12:	2600      	movs	r6, #0
 8001a14:	4d0c      	ldr	r5, [pc, #48]	; (8001a48 <__libc_init_array+0x38>)
 8001a16:	4c0d      	ldr	r4, [pc, #52]	; (8001a4c <__libc_init_array+0x3c>)
 8001a18:	1b64      	subs	r4, r4, r5
 8001a1a:	10a4      	asrs	r4, r4, #2
 8001a1c:	42a6      	cmp	r6, r4
 8001a1e:	d109      	bne.n	8001a34 <__libc_init_array+0x24>
 8001a20:	f000 fc5c 	bl	80022dc <_init>
 8001a24:	2600      	movs	r6, #0
 8001a26:	4d0a      	ldr	r5, [pc, #40]	; (8001a50 <__libc_init_array+0x40>)
 8001a28:	4c0a      	ldr	r4, [pc, #40]	; (8001a54 <__libc_init_array+0x44>)
 8001a2a:	1b64      	subs	r4, r4, r5
 8001a2c:	10a4      	asrs	r4, r4, #2
 8001a2e:	42a6      	cmp	r6, r4
 8001a30:	d105      	bne.n	8001a3e <__libc_init_array+0x2e>
 8001a32:	bd70      	pop	{r4, r5, r6, pc}
 8001a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a38:	4798      	blx	r3
 8001a3a:	3601      	adds	r6, #1
 8001a3c:	e7ee      	b.n	8001a1c <__libc_init_array+0xc>
 8001a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a42:	4798      	blx	r3
 8001a44:	3601      	adds	r6, #1
 8001a46:	e7f2      	b.n	8001a2e <__libc_init_array+0x1e>
 8001a48:	08002394 	.word	0x08002394
 8001a4c:	08002394 	.word	0x08002394
 8001a50:	08002394 	.word	0x08002394
 8001a54:	08002398 	.word	0x08002398

08001a58 <memset>:
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4402      	add	r2, r0
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d100      	bne.n	8001a62 <memset+0xa>
 8001a60:	4770      	bx	lr
 8001a62:	f803 1b01 	strb.w	r1, [r3], #1
 8001a66:	e7f9      	b.n	8001a5c <memset+0x4>

08001a68 <siprintf>:
 8001a68:	b40e      	push	{r1, r2, r3}
 8001a6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001a6e:	b500      	push	{lr}
 8001a70:	b09c      	sub	sp, #112	; 0x70
 8001a72:	ab1d      	add	r3, sp, #116	; 0x74
 8001a74:	9002      	str	r0, [sp, #8]
 8001a76:	9006      	str	r0, [sp, #24]
 8001a78:	9107      	str	r1, [sp, #28]
 8001a7a:	9104      	str	r1, [sp, #16]
 8001a7c:	4808      	ldr	r0, [pc, #32]	; (8001aa0 <siprintf+0x38>)
 8001a7e:	4909      	ldr	r1, [pc, #36]	; (8001aa4 <siprintf+0x3c>)
 8001a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a84:	9105      	str	r1, [sp, #20]
 8001a86:	6800      	ldr	r0, [r0, #0]
 8001a88:	a902      	add	r1, sp, #8
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	f000 f868 	bl	8001b60 <_svfiprintf_r>
 8001a90:	2200      	movs	r2, #0
 8001a92:	9b02      	ldr	r3, [sp, #8]
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	b01c      	add	sp, #112	; 0x70
 8001a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a9c:	b003      	add	sp, #12
 8001a9e:	4770      	bx	lr
 8001aa0:	2000000c 	.word	0x2000000c
 8001aa4:	ffff0208 	.word	0xffff0208

08001aa8 <__ssputs_r>:
 8001aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001aac:	688e      	ldr	r6, [r1, #8]
 8001aae:	4682      	mov	sl, r0
 8001ab0:	429e      	cmp	r6, r3
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	4690      	mov	r8, r2
 8001ab6:	461f      	mov	r7, r3
 8001ab8:	d838      	bhi.n	8001b2c <__ssputs_r+0x84>
 8001aba:	898a      	ldrh	r2, [r1, #12]
 8001abc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001ac0:	d032      	beq.n	8001b28 <__ssputs_r+0x80>
 8001ac2:	6825      	ldr	r5, [r4, #0]
 8001ac4:	6909      	ldr	r1, [r1, #16]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	eba5 0901 	sub.w	r9, r5, r1
 8001acc:	6965      	ldr	r5, [r4, #20]
 8001ace:	444b      	add	r3, r9
 8001ad0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001ad8:	106d      	asrs	r5, r5, #1
 8001ada:	429d      	cmp	r5, r3
 8001adc:	bf38      	it	cc
 8001ade:	461d      	movcc	r5, r3
 8001ae0:	0553      	lsls	r3, r2, #21
 8001ae2:	d531      	bpl.n	8001b48 <__ssputs_r+0xa0>
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	f000 fb53 	bl	8002190 <_malloc_r>
 8001aea:	4606      	mov	r6, r0
 8001aec:	b950      	cbnz	r0, 8001b04 <__ssputs_r+0x5c>
 8001aee:	230c      	movs	r3, #12
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f8ca 3000 	str.w	r3, [sl]
 8001af8:	89a3      	ldrh	r3, [r4, #12]
 8001afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001afe:	81a3      	strh	r3, [r4, #12]
 8001b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b04:	464a      	mov	r2, r9
 8001b06:	6921      	ldr	r1, [r4, #16]
 8001b08:	f000 face 	bl	80020a8 <memcpy>
 8001b0c:	89a3      	ldrh	r3, [r4, #12]
 8001b0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b16:	81a3      	strh	r3, [r4, #12]
 8001b18:	6126      	str	r6, [r4, #16]
 8001b1a:	444e      	add	r6, r9
 8001b1c:	6026      	str	r6, [r4, #0]
 8001b1e:	463e      	mov	r6, r7
 8001b20:	6165      	str	r5, [r4, #20]
 8001b22:	eba5 0509 	sub.w	r5, r5, r9
 8001b26:	60a5      	str	r5, [r4, #8]
 8001b28:	42be      	cmp	r6, r7
 8001b2a:	d900      	bls.n	8001b2e <__ssputs_r+0x86>
 8001b2c:	463e      	mov	r6, r7
 8001b2e:	4632      	mov	r2, r6
 8001b30:	4641      	mov	r1, r8
 8001b32:	6820      	ldr	r0, [r4, #0]
 8001b34:	f000 fac6 	bl	80020c4 <memmove>
 8001b38:	68a3      	ldr	r3, [r4, #8]
 8001b3a:	6822      	ldr	r2, [r4, #0]
 8001b3c:	1b9b      	subs	r3, r3, r6
 8001b3e:	4432      	add	r2, r6
 8001b40:	2000      	movs	r0, #0
 8001b42:	60a3      	str	r3, [r4, #8]
 8001b44:	6022      	str	r2, [r4, #0]
 8001b46:	e7db      	b.n	8001b00 <__ssputs_r+0x58>
 8001b48:	462a      	mov	r2, r5
 8001b4a:	f000 fb7b 	bl	8002244 <_realloc_r>
 8001b4e:	4606      	mov	r6, r0
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d1e1      	bne.n	8001b18 <__ssputs_r+0x70>
 8001b54:	4650      	mov	r0, sl
 8001b56:	6921      	ldr	r1, [r4, #16]
 8001b58:	f000 face 	bl	80020f8 <_free_r>
 8001b5c:	e7c7      	b.n	8001aee <__ssputs_r+0x46>
	...

08001b60 <_svfiprintf_r>:
 8001b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b64:	4698      	mov	r8, r3
 8001b66:	898b      	ldrh	r3, [r1, #12]
 8001b68:	4607      	mov	r7, r0
 8001b6a:	061b      	lsls	r3, r3, #24
 8001b6c:	460d      	mov	r5, r1
 8001b6e:	4614      	mov	r4, r2
 8001b70:	b09d      	sub	sp, #116	; 0x74
 8001b72:	d50e      	bpl.n	8001b92 <_svfiprintf_r+0x32>
 8001b74:	690b      	ldr	r3, [r1, #16]
 8001b76:	b963      	cbnz	r3, 8001b92 <_svfiprintf_r+0x32>
 8001b78:	2140      	movs	r1, #64	; 0x40
 8001b7a:	f000 fb09 	bl	8002190 <_malloc_r>
 8001b7e:	6028      	str	r0, [r5, #0]
 8001b80:	6128      	str	r0, [r5, #16]
 8001b82:	b920      	cbnz	r0, 8001b8e <_svfiprintf_r+0x2e>
 8001b84:	230c      	movs	r3, #12
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	e0d1      	b.n	8001d32 <_svfiprintf_r+0x1d2>
 8001b8e:	2340      	movs	r3, #64	; 0x40
 8001b90:	616b      	str	r3, [r5, #20]
 8001b92:	2300      	movs	r3, #0
 8001b94:	9309      	str	r3, [sp, #36]	; 0x24
 8001b96:	2320      	movs	r3, #32
 8001b98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b9c:	2330      	movs	r3, #48	; 0x30
 8001b9e:	f04f 0901 	mov.w	r9, #1
 8001ba2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ba6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001d4c <_svfiprintf_r+0x1ec>
 8001baa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001bae:	4623      	mov	r3, r4
 8001bb0:	469a      	mov	sl, r3
 8001bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001bb6:	b10a      	cbz	r2, 8001bbc <_svfiprintf_r+0x5c>
 8001bb8:	2a25      	cmp	r2, #37	; 0x25
 8001bba:	d1f9      	bne.n	8001bb0 <_svfiprintf_r+0x50>
 8001bbc:	ebba 0b04 	subs.w	fp, sl, r4
 8001bc0:	d00b      	beq.n	8001bda <_svfiprintf_r+0x7a>
 8001bc2:	465b      	mov	r3, fp
 8001bc4:	4622      	mov	r2, r4
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	4638      	mov	r0, r7
 8001bca:	f7ff ff6d 	bl	8001aa8 <__ssputs_r>
 8001bce:	3001      	adds	r0, #1
 8001bd0:	f000 80aa 	beq.w	8001d28 <_svfiprintf_r+0x1c8>
 8001bd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001bd6:	445a      	add	r2, fp
 8001bd8:	9209      	str	r2, [sp, #36]	; 0x24
 8001bda:	f89a 3000 	ldrb.w	r3, [sl]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80a2 	beq.w	8001d28 <_svfiprintf_r+0x1c8>
 8001be4:	2300      	movs	r3, #0
 8001be6:	f04f 32ff 	mov.w	r2, #4294967295
 8001bea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001bee:	f10a 0a01 	add.w	sl, sl, #1
 8001bf2:	9304      	str	r3, [sp, #16]
 8001bf4:	9307      	str	r3, [sp, #28]
 8001bf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001bfa:	931a      	str	r3, [sp, #104]	; 0x68
 8001bfc:	4654      	mov	r4, sl
 8001bfe:	2205      	movs	r2, #5
 8001c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c04:	4851      	ldr	r0, [pc, #324]	; (8001d4c <_svfiprintf_r+0x1ec>)
 8001c06:	f000 fa41 	bl	800208c <memchr>
 8001c0a:	9a04      	ldr	r2, [sp, #16]
 8001c0c:	b9d8      	cbnz	r0, 8001c46 <_svfiprintf_r+0xe6>
 8001c0e:	06d0      	lsls	r0, r2, #27
 8001c10:	bf44      	itt	mi
 8001c12:	2320      	movmi	r3, #32
 8001c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c18:	0711      	lsls	r1, r2, #28
 8001c1a:	bf44      	itt	mi
 8001c1c:	232b      	movmi	r3, #43	; 0x2b
 8001c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c22:	f89a 3000 	ldrb.w	r3, [sl]
 8001c26:	2b2a      	cmp	r3, #42	; 0x2a
 8001c28:	d015      	beq.n	8001c56 <_svfiprintf_r+0xf6>
 8001c2a:	4654      	mov	r4, sl
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f04f 0c0a 	mov.w	ip, #10
 8001c32:	9a07      	ldr	r2, [sp, #28]
 8001c34:	4621      	mov	r1, r4
 8001c36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c3a:	3b30      	subs	r3, #48	; 0x30
 8001c3c:	2b09      	cmp	r3, #9
 8001c3e:	d94e      	bls.n	8001cde <_svfiprintf_r+0x17e>
 8001c40:	b1b0      	cbz	r0, 8001c70 <_svfiprintf_r+0x110>
 8001c42:	9207      	str	r2, [sp, #28]
 8001c44:	e014      	b.n	8001c70 <_svfiprintf_r+0x110>
 8001c46:	eba0 0308 	sub.w	r3, r0, r8
 8001c4a:	fa09 f303 	lsl.w	r3, r9, r3
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	46a2      	mov	sl, r4
 8001c52:	9304      	str	r3, [sp, #16]
 8001c54:	e7d2      	b.n	8001bfc <_svfiprintf_r+0x9c>
 8001c56:	9b03      	ldr	r3, [sp, #12]
 8001c58:	1d19      	adds	r1, r3, #4
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	9103      	str	r1, [sp, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	bfbb      	ittet	lt
 8001c62:	425b      	neglt	r3, r3
 8001c64:	f042 0202 	orrlt.w	r2, r2, #2
 8001c68:	9307      	strge	r3, [sp, #28]
 8001c6a:	9307      	strlt	r3, [sp, #28]
 8001c6c:	bfb8      	it	lt
 8001c6e:	9204      	strlt	r2, [sp, #16]
 8001c70:	7823      	ldrb	r3, [r4, #0]
 8001c72:	2b2e      	cmp	r3, #46	; 0x2e
 8001c74:	d10c      	bne.n	8001c90 <_svfiprintf_r+0x130>
 8001c76:	7863      	ldrb	r3, [r4, #1]
 8001c78:	2b2a      	cmp	r3, #42	; 0x2a
 8001c7a:	d135      	bne.n	8001ce8 <_svfiprintf_r+0x188>
 8001c7c:	9b03      	ldr	r3, [sp, #12]
 8001c7e:	3402      	adds	r4, #2
 8001c80:	1d1a      	adds	r2, r3, #4
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	9203      	str	r2, [sp, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	bfb8      	it	lt
 8001c8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c8e:	9305      	str	r3, [sp, #20]
 8001c90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001d5c <_svfiprintf_r+0x1fc>
 8001c94:	2203      	movs	r2, #3
 8001c96:	4650      	mov	r0, sl
 8001c98:	7821      	ldrb	r1, [r4, #0]
 8001c9a:	f000 f9f7 	bl	800208c <memchr>
 8001c9e:	b140      	cbz	r0, 8001cb2 <_svfiprintf_r+0x152>
 8001ca0:	2340      	movs	r3, #64	; 0x40
 8001ca2:	eba0 000a 	sub.w	r0, r0, sl
 8001ca6:	fa03 f000 	lsl.w	r0, r3, r0
 8001caa:	9b04      	ldr	r3, [sp, #16]
 8001cac:	3401      	adds	r4, #1
 8001cae:	4303      	orrs	r3, r0
 8001cb0:	9304      	str	r3, [sp, #16]
 8001cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cb6:	2206      	movs	r2, #6
 8001cb8:	4825      	ldr	r0, [pc, #148]	; (8001d50 <_svfiprintf_r+0x1f0>)
 8001cba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001cbe:	f000 f9e5 	bl	800208c <memchr>
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	d038      	beq.n	8001d38 <_svfiprintf_r+0x1d8>
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <_svfiprintf_r+0x1f4>)
 8001cc8:	bb1b      	cbnz	r3, 8001d12 <_svfiprintf_r+0x1b2>
 8001cca:	9b03      	ldr	r3, [sp, #12]
 8001ccc:	3307      	adds	r3, #7
 8001cce:	f023 0307 	bic.w	r3, r3, #7
 8001cd2:	3308      	adds	r3, #8
 8001cd4:	9303      	str	r3, [sp, #12]
 8001cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cd8:	4433      	add	r3, r6
 8001cda:	9309      	str	r3, [sp, #36]	; 0x24
 8001cdc:	e767      	b.n	8001bae <_svfiprintf_r+0x4e>
 8001cde:	460c      	mov	r4, r1
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ce6:	e7a5      	b.n	8001c34 <_svfiprintf_r+0xd4>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f04f 0c0a 	mov.w	ip, #10
 8001cee:	4619      	mov	r1, r3
 8001cf0:	3401      	adds	r4, #1
 8001cf2:	9305      	str	r3, [sp, #20]
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001cfa:	3a30      	subs	r2, #48	; 0x30
 8001cfc:	2a09      	cmp	r2, #9
 8001cfe:	d903      	bls.n	8001d08 <_svfiprintf_r+0x1a8>
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0c5      	beq.n	8001c90 <_svfiprintf_r+0x130>
 8001d04:	9105      	str	r1, [sp, #20]
 8001d06:	e7c3      	b.n	8001c90 <_svfiprintf_r+0x130>
 8001d08:	4604      	mov	r4, r0
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d10:	e7f0      	b.n	8001cf4 <_svfiprintf_r+0x194>
 8001d12:	ab03      	add	r3, sp, #12
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	462a      	mov	r2, r5
 8001d18:	4638      	mov	r0, r7
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <_svfiprintf_r+0x1f8>)
 8001d1c:	a904      	add	r1, sp, #16
 8001d1e:	f3af 8000 	nop.w
 8001d22:	1c42      	adds	r2, r0, #1
 8001d24:	4606      	mov	r6, r0
 8001d26:	d1d6      	bne.n	8001cd6 <_svfiprintf_r+0x176>
 8001d28:	89ab      	ldrh	r3, [r5, #12]
 8001d2a:	065b      	lsls	r3, r3, #25
 8001d2c:	f53f af2c 	bmi.w	8001b88 <_svfiprintf_r+0x28>
 8001d30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d32:	b01d      	add	sp, #116	; 0x74
 8001d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d38:	ab03      	add	r3, sp, #12
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	462a      	mov	r2, r5
 8001d3e:	4638      	mov	r0, r7
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <_svfiprintf_r+0x1f8>)
 8001d42:	a904      	add	r1, sp, #16
 8001d44:	f000 f87c 	bl	8001e40 <_printf_i>
 8001d48:	e7eb      	b.n	8001d22 <_svfiprintf_r+0x1c2>
 8001d4a:	bf00      	nop
 8001d4c:	08002360 	.word	0x08002360
 8001d50:	0800236a 	.word	0x0800236a
 8001d54:	00000000 	.word	0x00000000
 8001d58:	08001aa9 	.word	0x08001aa9
 8001d5c:	08002366 	.word	0x08002366

08001d60 <_printf_common>:
 8001d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d64:	4616      	mov	r6, r2
 8001d66:	4699      	mov	r9, r3
 8001d68:	688a      	ldr	r2, [r1, #8]
 8001d6a:	690b      	ldr	r3, [r1, #16]
 8001d6c:	4607      	mov	r7, r0
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	bfb8      	it	lt
 8001d72:	4613      	movlt	r3, r2
 8001d74:	6033      	str	r3, [r6, #0]
 8001d76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d7a:	460c      	mov	r4, r1
 8001d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d80:	b10a      	cbz	r2, 8001d86 <_printf_common+0x26>
 8001d82:	3301      	adds	r3, #1
 8001d84:	6033      	str	r3, [r6, #0]
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	0699      	lsls	r1, r3, #26
 8001d8a:	bf42      	ittt	mi
 8001d8c:	6833      	ldrmi	r3, [r6, #0]
 8001d8e:	3302      	addmi	r3, #2
 8001d90:	6033      	strmi	r3, [r6, #0]
 8001d92:	6825      	ldr	r5, [r4, #0]
 8001d94:	f015 0506 	ands.w	r5, r5, #6
 8001d98:	d106      	bne.n	8001da8 <_printf_common+0x48>
 8001d9a:	f104 0a19 	add.w	sl, r4, #25
 8001d9e:	68e3      	ldr	r3, [r4, #12]
 8001da0:	6832      	ldr	r2, [r6, #0]
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	42ab      	cmp	r3, r5
 8001da6:	dc28      	bgt.n	8001dfa <_printf_common+0x9a>
 8001da8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001dac:	1e13      	subs	r3, r2, #0
 8001dae:	6822      	ldr	r2, [r4, #0]
 8001db0:	bf18      	it	ne
 8001db2:	2301      	movne	r3, #1
 8001db4:	0692      	lsls	r2, r2, #26
 8001db6:	d42d      	bmi.n	8001e14 <_printf_common+0xb4>
 8001db8:	4649      	mov	r1, r9
 8001dba:	4638      	mov	r0, r7
 8001dbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001dc0:	47c0      	blx	r8
 8001dc2:	3001      	adds	r0, #1
 8001dc4:	d020      	beq.n	8001e08 <_printf_common+0xa8>
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	68e5      	ldr	r5, [r4, #12]
 8001dca:	f003 0306 	and.w	r3, r3, #6
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf18      	it	ne
 8001dd2:	2500      	movne	r5, #0
 8001dd4:	6832      	ldr	r2, [r6, #0]
 8001dd6:	f04f 0600 	mov.w	r6, #0
 8001dda:	68a3      	ldr	r3, [r4, #8]
 8001ddc:	bf08      	it	eq
 8001dde:	1aad      	subeq	r5, r5, r2
 8001de0:	6922      	ldr	r2, [r4, #16]
 8001de2:	bf08      	it	eq
 8001de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001de8:	4293      	cmp	r3, r2
 8001dea:	bfc4      	itt	gt
 8001dec:	1a9b      	subgt	r3, r3, r2
 8001dee:	18ed      	addgt	r5, r5, r3
 8001df0:	341a      	adds	r4, #26
 8001df2:	42b5      	cmp	r5, r6
 8001df4:	d11a      	bne.n	8001e2c <_printf_common+0xcc>
 8001df6:	2000      	movs	r0, #0
 8001df8:	e008      	b.n	8001e0c <_printf_common+0xac>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	4652      	mov	r2, sl
 8001dfe:	4649      	mov	r1, r9
 8001e00:	4638      	mov	r0, r7
 8001e02:	47c0      	blx	r8
 8001e04:	3001      	adds	r0, #1
 8001e06:	d103      	bne.n	8001e10 <_printf_common+0xb0>
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e10:	3501      	adds	r5, #1
 8001e12:	e7c4      	b.n	8001d9e <_printf_common+0x3e>
 8001e14:	2030      	movs	r0, #48	; 0x30
 8001e16:	18e1      	adds	r1, r4, r3
 8001e18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e22:	4422      	add	r2, r4
 8001e24:	3302      	adds	r3, #2
 8001e26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e2a:	e7c5      	b.n	8001db8 <_printf_common+0x58>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	4622      	mov	r2, r4
 8001e30:	4649      	mov	r1, r9
 8001e32:	4638      	mov	r0, r7
 8001e34:	47c0      	blx	r8
 8001e36:	3001      	adds	r0, #1
 8001e38:	d0e6      	beq.n	8001e08 <_printf_common+0xa8>
 8001e3a:	3601      	adds	r6, #1
 8001e3c:	e7d9      	b.n	8001df2 <_printf_common+0x92>
	...

08001e40 <_printf_i>:
 8001e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e44:	460c      	mov	r4, r1
 8001e46:	7e27      	ldrb	r7, [r4, #24]
 8001e48:	4691      	mov	r9, r2
 8001e4a:	2f78      	cmp	r7, #120	; 0x78
 8001e4c:	4680      	mov	r8, r0
 8001e4e:	469a      	mov	sl, r3
 8001e50:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001e52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e56:	d807      	bhi.n	8001e68 <_printf_i+0x28>
 8001e58:	2f62      	cmp	r7, #98	; 0x62
 8001e5a:	d80a      	bhi.n	8001e72 <_printf_i+0x32>
 8001e5c:	2f00      	cmp	r7, #0
 8001e5e:	f000 80d9 	beq.w	8002014 <_printf_i+0x1d4>
 8001e62:	2f58      	cmp	r7, #88	; 0x58
 8001e64:	f000 80a4 	beq.w	8001fb0 <_printf_i+0x170>
 8001e68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001e6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001e70:	e03a      	b.n	8001ee8 <_printf_i+0xa8>
 8001e72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001e76:	2b15      	cmp	r3, #21
 8001e78:	d8f6      	bhi.n	8001e68 <_printf_i+0x28>
 8001e7a:	a001      	add	r0, pc, #4	; (adr r0, 8001e80 <_printf_i+0x40>)
 8001e7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001e80:	08001ed9 	.word	0x08001ed9
 8001e84:	08001eed 	.word	0x08001eed
 8001e88:	08001e69 	.word	0x08001e69
 8001e8c:	08001e69 	.word	0x08001e69
 8001e90:	08001e69 	.word	0x08001e69
 8001e94:	08001e69 	.word	0x08001e69
 8001e98:	08001eed 	.word	0x08001eed
 8001e9c:	08001e69 	.word	0x08001e69
 8001ea0:	08001e69 	.word	0x08001e69
 8001ea4:	08001e69 	.word	0x08001e69
 8001ea8:	08001e69 	.word	0x08001e69
 8001eac:	08001ffb 	.word	0x08001ffb
 8001eb0:	08001f1d 	.word	0x08001f1d
 8001eb4:	08001fdd 	.word	0x08001fdd
 8001eb8:	08001e69 	.word	0x08001e69
 8001ebc:	08001e69 	.word	0x08001e69
 8001ec0:	0800201d 	.word	0x0800201d
 8001ec4:	08001e69 	.word	0x08001e69
 8001ec8:	08001f1d 	.word	0x08001f1d
 8001ecc:	08001e69 	.word	0x08001e69
 8001ed0:	08001e69 	.word	0x08001e69
 8001ed4:	08001fe5 	.word	0x08001fe5
 8001ed8:	680b      	ldr	r3, [r1, #0]
 8001eda:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001ede:	1d1a      	adds	r2, r3, #4
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	600a      	str	r2, [r1, #0]
 8001ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0a4      	b.n	8002036 <_printf_i+0x1f6>
 8001eec:	6825      	ldr	r5, [r4, #0]
 8001eee:	6808      	ldr	r0, [r1, #0]
 8001ef0:	062e      	lsls	r6, r5, #24
 8001ef2:	f100 0304 	add.w	r3, r0, #4
 8001ef6:	d50a      	bpl.n	8001f0e <_printf_i+0xce>
 8001ef8:	6805      	ldr	r5, [r0, #0]
 8001efa:	600b      	str	r3, [r1, #0]
 8001efc:	2d00      	cmp	r5, #0
 8001efe:	da03      	bge.n	8001f08 <_printf_i+0xc8>
 8001f00:	232d      	movs	r3, #45	; 0x2d
 8001f02:	426d      	negs	r5, r5
 8001f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f08:	230a      	movs	r3, #10
 8001f0a:	485e      	ldr	r0, [pc, #376]	; (8002084 <_printf_i+0x244>)
 8001f0c:	e019      	b.n	8001f42 <_printf_i+0x102>
 8001f0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001f12:	6805      	ldr	r5, [r0, #0]
 8001f14:	600b      	str	r3, [r1, #0]
 8001f16:	bf18      	it	ne
 8001f18:	b22d      	sxthne	r5, r5
 8001f1a:	e7ef      	b.n	8001efc <_printf_i+0xbc>
 8001f1c:	680b      	ldr	r3, [r1, #0]
 8001f1e:	6825      	ldr	r5, [r4, #0]
 8001f20:	1d18      	adds	r0, r3, #4
 8001f22:	6008      	str	r0, [r1, #0]
 8001f24:	0628      	lsls	r0, r5, #24
 8001f26:	d501      	bpl.n	8001f2c <_printf_i+0xec>
 8001f28:	681d      	ldr	r5, [r3, #0]
 8001f2a:	e002      	b.n	8001f32 <_printf_i+0xf2>
 8001f2c:	0669      	lsls	r1, r5, #25
 8001f2e:	d5fb      	bpl.n	8001f28 <_printf_i+0xe8>
 8001f30:	881d      	ldrh	r5, [r3, #0]
 8001f32:	2f6f      	cmp	r7, #111	; 0x6f
 8001f34:	bf0c      	ite	eq
 8001f36:	2308      	moveq	r3, #8
 8001f38:	230a      	movne	r3, #10
 8001f3a:	4852      	ldr	r0, [pc, #328]	; (8002084 <_printf_i+0x244>)
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f42:	6866      	ldr	r6, [r4, #4]
 8001f44:	2e00      	cmp	r6, #0
 8001f46:	bfa8      	it	ge
 8001f48:	6821      	ldrge	r1, [r4, #0]
 8001f4a:	60a6      	str	r6, [r4, #8]
 8001f4c:	bfa4      	itt	ge
 8001f4e:	f021 0104 	bicge.w	r1, r1, #4
 8001f52:	6021      	strge	r1, [r4, #0]
 8001f54:	b90d      	cbnz	r5, 8001f5a <_printf_i+0x11a>
 8001f56:	2e00      	cmp	r6, #0
 8001f58:	d04d      	beq.n	8001ff6 <_printf_i+0x1b6>
 8001f5a:	4616      	mov	r6, r2
 8001f5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001f60:	fb03 5711 	mls	r7, r3, r1, r5
 8001f64:	5dc7      	ldrb	r7, [r0, r7]
 8001f66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001f6a:	462f      	mov	r7, r5
 8001f6c:	42bb      	cmp	r3, r7
 8001f6e:	460d      	mov	r5, r1
 8001f70:	d9f4      	bls.n	8001f5c <_printf_i+0x11c>
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d10b      	bne.n	8001f8e <_printf_i+0x14e>
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	07df      	lsls	r7, r3, #31
 8001f7a:	d508      	bpl.n	8001f8e <_printf_i+0x14e>
 8001f7c:	6923      	ldr	r3, [r4, #16]
 8001f7e:	6861      	ldr	r1, [r4, #4]
 8001f80:	4299      	cmp	r1, r3
 8001f82:	bfde      	ittt	le
 8001f84:	2330      	movle	r3, #48	; 0x30
 8001f86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001f8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001f8e:	1b92      	subs	r2, r2, r6
 8001f90:	6122      	str	r2, [r4, #16]
 8001f92:	464b      	mov	r3, r9
 8001f94:	4621      	mov	r1, r4
 8001f96:	4640      	mov	r0, r8
 8001f98:	f8cd a000 	str.w	sl, [sp]
 8001f9c:	aa03      	add	r2, sp, #12
 8001f9e:	f7ff fedf 	bl	8001d60 <_printf_common>
 8001fa2:	3001      	adds	r0, #1
 8001fa4:	d14c      	bne.n	8002040 <_printf_i+0x200>
 8001fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8001faa:	b004      	add	sp, #16
 8001fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fb0:	4834      	ldr	r0, [pc, #208]	; (8002084 <_printf_i+0x244>)
 8001fb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001fb6:	680e      	ldr	r6, [r1, #0]
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	f856 5b04 	ldr.w	r5, [r6], #4
 8001fbe:	061f      	lsls	r7, r3, #24
 8001fc0:	600e      	str	r6, [r1, #0]
 8001fc2:	d514      	bpl.n	8001fee <_printf_i+0x1ae>
 8001fc4:	07d9      	lsls	r1, r3, #31
 8001fc6:	bf44      	itt	mi
 8001fc8:	f043 0320 	orrmi.w	r3, r3, #32
 8001fcc:	6023      	strmi	r3, [r4, #0]
 8001fce:	b91d      	cbnz	r5, 8001fd8 <_printf_i+0x198>
 8001fd0:	6823      	ldr	r3, [r4, #0]
 8001fd2:	f023 0320 	bic.w	r3, r3, #32
 8001fd6:	6023      	str	r3, [r4, #0]
 8001fd8:	2310      	movs	r3, #16
 8001fda:	e7af      	b.n	8001f3c <_printf_i+0xfc>
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	f043 0320 	orr.w	r3, r3, #32
 8001fe2:	6023      	str	r3, [r4, #0]
 8001fe4:	2378      	movs	r3, #120	; 0x78
 8001fe6:	4828      	ldr	r0, [pc, #160]	; (8002088 <_printf_i+0x248>)
 8001fe8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001fec:	e7e3      	b.n	8001fb6 <_printf_i+0x176>
 8001fee:	065e      	lsls	r6, r3, #25
 8001ff0:	bf48      	it	mi
 8001ff2:	b2ad      	uxthmi	r5, r5
 8001ff4:	e7e6      	b.n	8001fc4 <_printf_i+0x184>
 8001ff6:	4616      	mov	r6, r2
 8001ff8:	e7bb      	b.n	8001f72 <_printf_i+0x132>
 8001ffa:	680b      	ldr	r3, [r1, #0]
 8001ffc:	6826      	ldr	r6, [r4, #0]
 8001ffe:	1d1d      	adds	r5, r3, #4
 8002000:	6960      	ldr	r0, [r4, #20]
 8002002:	600d      	str	r5, [r1, #0]
 8002004:	0635      	lsls	r5, r6, #24
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	d501      	bpl.n	800200e <_printf_i+0x1ce>
 800200a:	6018      	str	r0, [r3, #0]
 800200c:	e002      	b.n	8002014 <_printf_i+0x1d4>
 800200e:	0671      	lsls	r1, r6, #25
 8002010:	d5fb      	bpl.n	800200a <_printf_i+0x1ca>
 8002012:	8018      	strh	r0, [r3, #0]
 8002014:	2300      	movs	r3, #0
 8002016:	4616      	mov	r6, r2
 8002018:	6123      	str	r3, [r4, #16]
 800201a:	e7ba      	b.n	8001f92 <_printf_i+0x152>
 800201c:	680b      	ldr	r3, [r1, #0]
 800201e:	1d1a      	adds	r2, r3, #4
 8002020:	600a      	str	r2, [r1, #0]
 8002022:	681e      	ldr	r6, [r3, #0]
 8002024:	2100      	movs	r1, #0
 8002026:	4630      	mov	r0, r6
 8002028:	6862      	ldr	r2, [r4, #4]
 800202a:	f000 f82f 	bl	800208c <memchr>
 800202e:	b108      	cbz	r0, 8002034 <_printf_i+0x1f4>
 8002030:	1b80      	subs	r0, r0, r6
 8002032:	6060      	str	r0, [r4, #4]
 8002034:	6863      	ldr	r3, [r4, #4]
 8002036:	6123      	str	r3, [r4, #16]
 8002038:	2300      	movs	r3, #0
 800203a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800203e:	e7a8      	b.n	8001f92 <_printf_i+0x152>
 8002040:	4632      	mov	r2, r6
 8002042:	4649      	mov	r1, r9
 8002044:	4640      	mov	r0, r8
 8002046:	6923      	ldr	r3, [r4, #16]
 8002048:	47d0      	blx	sl
 800204a:	3001      	adds	r0, #1
 800204c:	d0ab      	beq.n	8001fa6 <_printf_i+0x166>
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	079b      	lsls	r3, r3, #30
 8002052:	d413      	bmi.n	800207c <_printf_i+0x23c>
 8002054:	68e0      	ldr	r0, [r4, #12]
 8002056:	9b03      	ldr	r3, [sp, #12]
 8002058:	4298      	cmp	r0, r3
 800205a:	bfb8      	it	lt
 800205c:	4618      	movlt	r0, r3
 800205e:	e7a4      	b.n	8001faa <_printf_i+0x16a>
 8002060:	2301      	movs	r3, #1
 8002062:	4632      	mov	r2, r6
 8002064:	4649      	mov	r1, r9
 8002066:	4640      	mov	r0, r8
 8002068:	47d0      	blx	sl
 800206a:	3001      	adds	r0, #1
 800206c:	d09b      	beq.n	8001fa6 <_printf_i+0x166>
 800206e:	3501      	adds	r5, #1
 8002070:	68e3      	ldr	r3, [r4, #12]
 8002072:	9903      	ldr	r1, [sp, #12]
 8002074:	1a5b      	subs	r3, r3, r1
 8002076:	42ab      	cmp	r3, r5
 8002078:	dcf2      	bgt.n	8002060 <_printf_i+0x220>
 800207a:	e7eb      	b.n	8002054 <_printf_i+0x214>
 800207c:	2500      	movs	r5, #0
 800207e:	f104 0619 	add.w	r6, r4, #25
 8002082:	e7f5      	b.n	8002070 <_printf_i+0x230>
 8002084:	08002371 	.word	0x08002371
 8002088:	08002382 	.word	0x08002382

0800208c <memchr>:
 800208c:	4603      	mov	r3, r0
 800208e:	b510      	push	{r4, lr}
 8002090:	b2c9      	uxtb	r1, r1
 8002092:	4402      	add	r2, r0
 8002094:	4293      	cmp	r3, r2
 8002096:	4618      	mov	r0, r3
 8002098:	d101      	bne.n	800209e <memchr+0x12>
 800209a:	2000      	movs	r0, #0
 800209c:	e003      	b.n	80020a6 <memchr+0x1a>
 800209e:	7804      	ldrb	r4, [r0, #0]
 80020a0:	3301      	adds	r3, #1
 80020a2:	428c      	cmp	r4, r1
 80020a4:	d1f6      	bne.n	8002094 <memchr+0x8>
 80020a6:	bd10      	pop	{r4, pc}

080020a8 <memcpy>:
 80020a8:	440a      	add	r2, r1
 80020aa:	4291      	cmp	r1, r2
 80020ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80020b0:	d100      	bne.n	80020b4 <memcpy+0xc>
 80020b2:	4770      	bx	lr
 80020b4:	b510      	push	{r4, lr}
 80020b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020ba:	4291      	cmp	r1, r2
 80020bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020c0:	d1f9      	bne.n	80020b6 <memcpy+0xe>
 80020c2:	bd10      	pop	{r4, pc}

080020c4 <memmove>:
 80020c4:	4288      	cmp	r0, r1
 80020c6:	b510      	push	{r4, lr}
 80020c8:	eb01 0402 	add.w	r4, r1, r2
 80020cc:	d902      	bls.n	80020d4 <memmove+0x10>
 80020ce:	4284      	cmp	r4, r0
 80020d0:	4623      	mov	r3, r4
 80020d2:	d807      	bhi.n	80020e4 <memmove+0x20>
 80020d4:	1e43      	subs	r3, r0, #1
 80020d6:	42a1      	cmp	r1, r4
 80020d8:	d008      	beq.n	80020ec <memmove+0x28>
 80020da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80020de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80020e2:	e7f8      	b.n	80020d6 <memmove+0x12>
 80020e4:	4601      	mov	r1, r0
 80020e6:	4402      	add	r2, r0
 80020e8:	428a      	cmp	r2, r1
 80020ea:	d100      	bne.n	80020ee <memmove+0x2a>
 80020ec:	bd10      	pop	{r4, pc}
 80020ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80020f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80020f6:	e7f7      	b.n	80020e8 <memmove+0x24>

080020f8 <_free_r>:
 80020f8:	b538      	push	{r3, r4, r5, lr}
 80020fa:	4605      	mov	r5, r0
 80020fc:	2900      	cmp	r1, #0
 80020fe:	d043      	beq.n	8002188 <_free_r+0x90>
 8002100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002104:	1f0c      	subs	r4, r1, #4
 8002106:	2b00      	cmp	r3, #0
 8002108:	bfb8      	it	lt
 800210a:	18e4      	addlt	r4, r4, r3
 800210c:	f000 f8d0 	bl	80022b0 <__malloc_lock>
 8002110:	4a1e      	ldr	r2, [pc, #120]	; (800218c <_free_r+0x94>)
 8002112:	6813      	ldr	r3, [r2, #0]
 8002114:	4610      	mov	r0, r2
 8002116:	b933      	cbnz	r3, 8002126 <_free_r+0x2e>
 8002118:	6063      	str	r3, [r4, #4]
 800211a:	6014      	str	r4, [r2, #0]
 800211c:	4628      	mov	r0, r5
 800211e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002122:	f000 b8cb 	b.w	80022bc <__malloc_unlock>
 8002126:	42a3      	cmp	r3, r4
 8002128:	d90a      	bls.n	8002140 <_free_r+0x48>
 800212a:	6821      	ldr	r1, [r4, #0]
 800212c:	1862      	adds	r2, r4, r1
 800212e:	4293      	cmp	r3, r2
 8002130:	bf01      	itttt	eq
 8002132:	681a      	ldreq	r2, [r3, #0]
 8002134:	685b      	ldreq	r3, [r3, #4]
 8002136:	1852      	addeq	r2, r2, r1
 8002138:	6022      	streq	r2, [r4, #0]
 800213a:	6063      	str	r3, [r4, #4]
 800213c:	6004      	str	r4, [r0, #0]
 800213e:	e7ed      	b.n	800211c <_free_r+0x24>
 8002140:	461a      	mov	r2, r3
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	b10b      	cbz	r3, 800214a <_free_r+0x52>
 8002146:	42a3      	cmp	r3, r4
 8002148:	d9fa      	bls.n	8002140 <_free_r+0x48>
 800214a:	6811      	ldr	r1, [r2, #0]
 800214c:	1850      	adds	r0, r2, r1
 800214e:	42a0      	cmp	r0, r4
 8002150:	d10b      	bne.n	800216a <_free_r+0x72>
 8002152:	6820      	ldr	r0, [r4, #0]
 8002154:	4401      	add	r1, r0
 8002156:	1850      	adds	r0, r2, r1
 8002158:	4283      	cmp	r3, r0
 800215a:	6011      	str	r1, [r2, #0]
 800215c:	d1de      	bne.n	800211c <_free_r+0x24>
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4401      	add	r1, r0
 8002164:	6011      	str	r1, [r2, #0]
 8002166:	6053      	str	r3, [r2, #4]
 8002168:	e7d8      	b.n	800211c <_free_r+0x24>
 800216a:	d902      	bls.n	8002172 <_free_r+0x7a>
 800216c:	230c      	movs	r3, #12
 800216e:	602b      	str	r3, [r5, #0]
 8002170:	e7d4      	b.n	800211c <_free_r+0x24>
 8002172:	6820      	ldr	r0, [r4, #0]
 8002174:	1821      	adds	r1, r4, r0
 8002176:	428b      	cmp	r3, r1
 8002178:	bf01      	itttt	eq
 800217a:	6819      	ldreq	r1, [r3, #0]
 800217c:	685b      	ldreq	r3, [r3, #4]
 800217e:	1809      	addeq	r1, r1, r0
 8002180:	6021      	streq	r1, [r4, #0]
 8002182:	6063      	str	r3, [r4, #4]
 8002184:	6054      	str	r4, [r2, #4]
 8002186:	e7c9      	b.n	800211c <_free_r+0x24>
 8002188:	bd38      	pop	{r3, r4, r5, pc}
 800218a:	bf00      	nop
 800218c:	200000f4 	.word	0x200000f4

08002190 <_malloc_r>:
 8002190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002192:	1ccd      	adds	r5, r1, #3
 8002194:	f025 0503 	bic.w	r5, r5, #3
 8002198:	3508      	adds	r5, #8
 800219a:	2d0c      	cmp	r5, #12
 800219c:	bf38      	it	cc
 800219e:	250c      	movcc	r5, #12
 80021a0:	2d00      	cmp	r5, #0
 80021a2:	4606      	mov	r6, r0
 80021a4:	db01      	blt.n	80021aa <_malloc_r+0x1a>
 80021a6:	42a9      	cmp	r1, r5
 80021a8:	d903      	bls.n	80021b2 <_malloc_r+0x22>
 80021aa:	230c      	movs	r3, #12
 80021ac:	6033      	str	r3, [r6, #0]
 80021ae:	2000      	movs	r0, #0
 80021b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021b2:	f000 f87d 	bl	80022b0 <__malloc_lock>
 80021b6:	4921      	ldr	r1, [pc, #132]	; (800223c <_malloc_r+0xac>)
 80021b8:	680a      	ldr	r2, [r1, #0]
 80021ba:	4614      	mov	r4, r2
 80021bc:	b99c      	cbnz	r4, 80021e6 <_malloc_r+0x56>
 80021be:	4f20      	ldr	r7, [pc, #128]	; (8002240 <_malloc_r+0xb0>)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	b923      	cbnz	r3, 80021ce <_malloc_r+0x3e>
 80021c4:	4621      	mov	r1, r4
 80021c6:	4630      	mov	r0, r6
 80021c8:	f000 f862 	bl	8002290 <_sbrk_r>
 80021cc:	6038      	str	r0, [r7, #0]
 80021ce:	4629      	mov	r1, r5
 80021d0:	4630      	mov	r0, r6
 80021d2:	f000 f85d 	bl	8002290 <_sbrk_r>
 80021d6:	1c43      	adds	r3, r0, #1
 80021d8:	d123      	bne.n	8002222 <_malloc_r+0x92>
 80021da:	230c      	movs	r3, #12
 80021dc:	4630      	mov	r0, r6
 80021de:	6033      	str	r3, [r6, #0]
 80021e0:	f000 f86c 	bl	80022bc <__malloc_unlock>
 80021e4:	e7e3      	b.n	80021ae <_malloc_r+0x1e>
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	1b5b      	subs	r3, r3, r5
 80021ea:	d417      	bmi.n	800221c <_malloc_r+0x8c>
 80021ec:	2b0b      	cmp	r3, #11
 80021ee:	d903      	bls.n	80021f8 <_malloc_r+0x68>
 80021f0:	6023      	str	r3, [r4, #0]
 80021f2:	441c      	add	r4, r3
 80021f4:	6025      	str	r5, [r4, #0]
 80021f6:	e004      	b.n	8002202 <_malloc_r+0x72>
 80021f8:	6863      	ldr	r3, [r4, #4]
 80021fa:	42a2      	cmp	r2, r4
 80021fc:	bf0c      	ite	eq
 80021fe:	600b      	streq	r3, [r1, #0]
 8002200:	6053      	strne	r3, [r2, #4]
 8002202:	4630      	mov	r0, r6
 8002204:	f000 f85a 	bl	80022bc <__malloc_unlock>
 8002208:	f104 000b 	add.w	r0, r4, #11
 800220c:	1d23      	adds	r3, r4, #4
 800220e:	f020 0007 	bic.w	r0, r0, #7
 8002212:	1ac2      	subs	r2, r0, r3
 8002214:	d0cc      	beq.n	80021b0 <_malloc_r+0x20>
 8002216:	1a1b      	subs	r3, r3, r0
 8002218:	50a3      	str	r3, [r4, r2]
 800221a:	e7c9      	b.n	80021b0 <_malloc_r+0x20>
 800221c:	4622      	mov	r2, r4
 800221e:	6864      	ldr	r4, [r4, #4]
 8002220:	e7cc      	b.n	80021bc <_malloc_r+0x2c>
 8002222:	1cc4      	adds	r4, r0, #3
 8002224:	f024 0403 	bic.w	r4, r4, #3
 8002228:	42a0      	cmp	r0, r4
 800222a:	d0e3      	beq.n	80021f4 <_malloc_r+0x64>
 800222c:	1a21      	subs	r1, r4, r0
 800222e:	4630      	mov	r0, r6
 8002230:	f000 f82e 	bl	8002290 <_sbrk_r>
 8002234:	3001      	adds	r0, #1
 8002236:	d1dd      	bne.n	80021f4 <_malloc_r+0x64>
 8002238:	e7cf      	b.n	80021da <_malloc_r+0x4a>
 800223a:	bf00      	nop
 800223c:	200000f4 	.word	0x200000f4
 8002240:	200000f8 	.word	0x200000f8

08002244 <_realloc_r>:
 8002244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002246:	4607      	mov	r7, r0
 8002248:	4614      	mov	r4, r2
 800224a:	460e      	mov	r6, r1
 800224c:	b921      	cbnz	r1, 8002258 <_realloc_r+0x14>
 800224e:	4611      	mov	r1, r2
 8002250:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002254:	f7ff bf9c 	b.w	8002190 <_malloc_r>
 8002258:	b922      	cbnz	r2, 8002264 <_realloc_r+0x20>
 800225a:	f7ff ff4d 	bl	80020f8 <_free_r>
 800225e:	4625      	mov	r5, r4
 8002260:	4628      	mov	r0, r5
 8002262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002264:	f000 f830 	bl	80022c8 <_malloc_usable_size_r>
 8002268:	42a0      	cmp	r0, r4
 800226a:	d20f      	bcs.n	800228c <_realloc_r+0x48>
 800226c:	4621      	mov	r1, r4
 800226e:	4638      	mov	r0, r7
 8002270:	f7ff ff8e 	bl	8002190 <_malloc_r>
 8002274:	4605      	mov	r5, r0
 8002276:	2800      	cmp	r0, #0
 8002278:	d0f2      	beq.n	8002260 <_realloc_r+0x1c>
 800227a:	4631      	mov	r1, r6
 800227c:	4622      	mov	r2, r4
 800227e:	f7ff ff13 	bl	80020a8 <memcpy>
 8002282:	4631      	mov	r1, r6
 8002284:	4638      	mov	r0, r7
 8002286:	f7ff ff37 	bl	80020f8 <_free_r>
 800228a:	e7e9      	b.n	8002260 <_realloc_r+0x1c>
 800228c:	4635      	mov	r5, r6
 800228e:	e7e7      	b.n	8002260 <_realloc_r+0x1c>

08002290 <_sbrk_r>:
 8002290:	b538      	push	{r3, r4, r5, lr}
 8002292:	2300      	movs	r3, #0
 8002294:	4d05      	ldr	r5, [pc, #20]	; (80022ac <_sbrk_r+0x1c>)
 8002296:	4604      	mov	r4, r0
 8002298:	4608      	mov	r0, r1
 800229a:	602b      	str	r3, [r5, #0]
 800229c:	f7fe fa2c 	bl	80006f8 <_sbrk>
 80022a0:	1c43      	adds	r3, r0, #1
 80022a2:	d102      	bne.n	80022aa <_sbrk_r+0x1a>
 80022a4:	682b      	ldr	r3, [r5, #0]
 80022a6:	b103      	cbz	r3, 80022aa <_sbrk_r+0x1a>
 80022a8:	6023      	str	r3, [r4, #0]
 80022aa:	bd38      	pop	{r3, r4, r5, pc}
 80022ac:	20000144 	.word	0x20000144

080022b0 <__malloc_lock>:
 80022b0:	4801      	ldr	r0, [pc, #4]	; (80022b8 <__malloc_lock+0x8>)
 80022b2:	f000 b811 	b.w	80022d8 <__retarget_lock_acquire_recursive>
 80022b6:	bf00      	nop
 80022b8:	2000014c 	.word	0x2000014c

080022bc <__malloc_unlock>:
 80022bc:	4801      	ldr	r0, [pc, #4]	; (80022c4 <__malloc_unlock+0x8>)
 80022be:	f000 b80c 	b.w	80022da <__retarget_lock_release_recursive>
 80022c2:	bf00      	nop
 80022c4:	2000014c 	.word	0x2000014c

080022c8 <_malloc_usable_size_r>:
 80022c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022cc:	1f18      	subs	r0, r3, #4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bfbc      	itt	lt
 80022d2:	580b      	ldrlt	r3, [r1, r0]
 80022d4:	18c0      	addlt	r0, r0, r3
 80022d6:	4770      	bx	lr

080022d8 <__retarget_lock_acquire_recursive>:
 80022d8:	4770      	bx	lr

080022da <__retarget_lock_release_recursive>:
 80022da:	4770      	bx	lr

080022dc <_init>:
 80022dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022de:	bf00      	nop
 80022e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022e2:	bc08      	pop	{r3}
 80022e4:	469e      	mov	lr, r3
 80022e6:	4770      	bx	lr

080022e8 <_fini>:
 80022e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ea:	bf00      	nop
 80022ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ee:	bc08      	pop	{r3}
 80022f0:	469e      	mov	lr, r3
 80022f2:	4770      	bx	lr
