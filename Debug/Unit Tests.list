
Unit Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002274  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002380  08002380  00012380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023f0  080023f0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080023f0  080023f0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023f0  080023f0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023f0  080023f0  000123f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023f4  080023f4  000123f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080023f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000078  08002470  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002470  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005de5  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001406  00000000  00000000  00025e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  00027290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b0  00000000  00000000  000278b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160e2  00000000  00000000  00027e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000066a0  00000000  00000000  0003df4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080344  00000000  00000000  000445ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c492e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b9c  00000000  00000000  000c4984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002368 	.word	0x08002368

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002368 	.word	0x08002368

0800014c <getMax>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
int32_t getMax(int32_t term1, int32_t term2){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	if (term1 > term2) return term1;
 8000156:	687a      	ldr	r2, [r7, #4]
 8000158:	683b      	ldr	r3, [r7, #0]
 800015a:	429a      	cmp	r2, r3
 800015c:	dd01      	ble.n	8000162 <getMax+0x16>
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	e000      	b.n	8000164 <getMax+0x18>
	else return term2;
 8000162:	683b      	ldr	r3, [r7, #0]
}
 8000164:	4618      	mov	r0, r3
 8000166:	370c      	adds	r7, #12
 8000168:	46bd      	mov	sp, r7
 800016a:	bc80      	pop	{r7}
 800016c:	4770      	bx	lr
	...

08000170 <myPrint>:

void myPrint(UART_HandleTypeDef huart, uint8_t * pData){
 8000170:	b084      	sub	sp, #16
 8000172:	b580      	push	{r7, lr}
 8000174:	b0c0      	sub	sp, #256	; 0x100
 8000176:	af00      	add	r7, sp, #0
 8000178:	f507 7c84 	add.w	ip, r7, #264	; 0x108
 800017c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t MSG[255] = {'\0'};
 8000180:	463b      	mov	r3, r7
 8000182:	2200      	movs	r2, #0
 8000184:	601a      	str	r2, [r3, #0]
 8000186:	3304      	adds	r3, #4
 8000188:	22fb      	movs	r2, #251	; 0xfb
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f001 fca9 	bl	8001ae4 <memset>
	sprintf((char *)MSG, (char *)pData);
 8000192:	463b      	mov	r3, r7
 8000194:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8000198:	4618      	mov	r0, r3
 800019a:	f001 fcab 	bl	8001af4 <siprintf>
	HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 0xFFFF);
 800019e:	4639      	mov	r1, r7
 80001a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001a4:	22ff      	movs	r2, #255	; 0xff
 80001a6:	4805      	ldr	r0, [pc, #20]	; (80001bc <myPrint+0x4c>)
 80001a8:	f001 fb07 	bl	80017ba <HAL_UART_Transmit>
}
 80001ac:	bf00      	nop
 80001ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80001b2:	46bd      	mov	sp, r7
 80001b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr
 80001bc:	20000110 	.word	0x20000110

080001c0 <DtoZkette>:

uint8_t * DtoZkette(int32_t number){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	sprintf((char *)myMSG, "%d", number);
 80001c8:	687a      	ldr	r2, [r7, #4]
 80001ca:	4904      	ldr	r1, [pc, #16]	; (80001dc <DtoZkette+0x1c>)
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <DtoZkette+0x20>)
 80001ce:	f001 fc91 	bl	8001af4 <siprintf>
	return myMSG;
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <DtoZkette+0x20>)
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	08002380 	.word	0x08002380
 80001e0:	20000094 	.word	0x20000094

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001e6:	b091      	sub	sp, #68	; 0x44
 80001e8:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */
	//int32_t a=-1, b=2, c=-3, d=5;

	if (getMax(0, 2) == 2) result[0] = 1;
 80001ea:	2102      	movs	r1, #2
 80001ec:	2000      	movs	r0, #0
 80001ee:	f7ff ffad 	bl	800014c <getMax>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b02      	cmp	r3, #2
 80001f6:	d103      	bne.n	8000200 <main+0x1c>
 80001f8:	4b96      	ldr	r3, [pc, #600]	; (8000454 <main+0x270>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	701a      	strb	r2, [r3, #0]
 80001fe:	e002      	b.n	8000206 <main+0x22>
	else result[0] = 0;
 8000200:	4b94      	ldr	r3, [pc, #592]	; (8000454 <main+0x270>)
 8000202:	2200      	movs	r2, #0
 8000204:	701a      	strb	r2, [r3, #0]
	if (getMax(100, 25) == 100) result[1] = 1;
 8000206:	2119      	movs	r1, #25
 8000208:	2064      	movs	r0, #100	; 0x64
 800020a:	f7ff ff9f 	bl	800014c <getMax>
 800020e:	4603      	mov	r3, r0
 8000210:	2b64      	cmp	r3, #100	; 0x64
 8000212:	d103      	bne.n	800021c <main+0x38>
 8000214:	4b8f      	ldr	r3, [pc, #572]	; (8000454 <main+0x270>)
 8000216:	2201      	movs	r2, #1
 8000218:	705a      	strb	r2, [r3, #1]
 800021a:	e002      	b.n	8000222 <main+0x3e>
	else result[1] = 0;
 800021c:	4b8d      	ldr	r3, [pc, #564]	; (8000454 <main+0x270>)
 800021e:	2200      	movs	r2, #0
 8000220:	705a      	strb	r2, [r3, #1]
	if (getMax(12, 32) == 32) result[2] = 1;
 8000222:	2120      	movs	r1, #32
 8000224:	200c      	movs	r0, #12
 8000226:	f7ff ff91 	bl	800014c <getMax>
 800022a:	4603      	mov	r3, r0
 800022c:	2b20      	cmp	r3, #32
 800022e:	d103      	bne.n	8000238 <main+0x54>
 8000230:	4b88      	ldr	r3, [pc, #544]	; (8000454 <main+0x270>)
 8000232:	2201      	movs	r2, #1
 8000234:	709a      	strb	r2, [r3, #2]
 8000236:	e002      	b.n	800023e <main+0x5a>
	else result[2] = 0;
 8000238:	4b86      	ldr	r3, [pc, #536]	; (8000454 <main+0x270>)
 800023a:	2200      	movs	r2, #0
 800023c:	709a      	strb	r2, [r3, #2]
	if (getMax(1, 5) == 5) result[3] = 1;
 800023e:	2105      	movs	r1, #5
 8000240:	2001      	movs	r0, #1
 8000242:	f7ff ff83 	bl	800014c <getMax>
 8000246:	4603      	mov	r3, r0
 8000248:	2b05      	cmp	r3, #5
 800024a:	d103      	bne.n	8000254 <main+0x70>
 800024c:	4b81      	ldr	r3, [pc, #516]	; (8000454 <main+0x270>)
 800024e:	2201      	movs	r2, #1
 8000250:	70da      	strb	r2, [r3, #3]
 8000252:	e002      	b.n	800025a <main+0x76>
	else result[3] = 0;
 8000254:	4b7f      	ldr	r3, [pc, #508]	; (8000454 <main+0x270>)
 8000256:	2200      	movs	r2, #0
 8000258:	70da      	strb	r2, [r3, #3]
	if (getMax(-424, -1201) == -424) result[4] = 1;
 800025a:	f46f 6196 	mvn.w	r1, #1200	; 0x4b0
 800025e:	487e      	ldr	r0, [pc, #504]	; (8000458 <main+0x274>)
 8000260:	f7ff ff74 	bl	800014c <getMax>
 8000264:	4603      	mov	r3, r0
 8000266:	f513 7fd4 	cmn.w	r3, #424	; 0x1a8
 800026a:	d103      	bne.n	8000274 <main+0x90>
 800026c:	4b79      	ldr	r3, [pc, #484]	; (8000454 <main+0x270>)
 800026e:	2201      	movs	r2, #1
 8000270:	711a      	strb	r2, [r3, #4]
 8000272:	e002      	b.n	800027a <main+0x96>
	else result[4] = 0;
 8000274:	4b77      	ldr	r3, [pc, #476]	; (8000454 <main+0x270>)
 8000276:	2200      	movs	r2, #0
 8000278:	711a      	strb	r2, [r3, #4]
	if (getMax(-124, -54564) == -124) result[5] = 1;
 800027a:	4978      	ldr	r1, [pc, #480]	; (800045c <main+0x278>)
 800027c:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8000280:	f7ff ff64 	bl	800014c <getMax>
 8000284:	4603      	mov	r3, r0
 8000286:	f113 0f7c 	cmn.w	r3, #124	; 0x7c
 800028a:	d103      	bne.n	8000294 <main+0xb0>
 800028c:	4b71      	ldr	r3, [pc, #452]	; (8000454 <main+0x270>)
 800028e:	2201      	movs	r2, #1
 8000290:	715a      	strb	r2, [r3, #5]
 8000292:	e002      	b.n	800029a <main+0xb6>
	else result[5] = 0;
 8000294:	4b6f      	ldr	r3, [pc, #444]	; (8000454 <main+0x270>)
 8000296:	2200      	movs	r2, #0
 8000298:	715a      	strb	r2, [r3, #5]
	if (getMax(-4561, -45) == -45) result[6] = 1;
 800029a:	f06f 012c 	mvn.w	r1, #44	; 0x2c
 800029e:	4870      	ldr	r0, [pc, #448]	; (8000460 <main+0x27c>)
 80002a0:	f7ff ff54 	bl	800014c <getMax>
 80002a4:	4603      	mov	r3, r0
 80002a6:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 80002aa:	d103      	bne.n	80002b4 <main+0xd0>
 80002ac:	4b69      	ldr	r3, [pc, #420]	; (8000454 <main+0x270>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	719a      	strb	r2, [r3, #6]
 80002b2:	e002      	b.n	80002ba <main+0xd6>
	else result[6] = 0;
 80002b4:	4b67      	ldr	r3, [pc, #412]	; (8000454 <main+0x270>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	719a      	strb	r2, [r3, #6]
	if (getMax(456, -8757) == 456) result[7] = 1;
 80002ba:	496a      	ldr	r1, [pc, #424]	; (8000464 <main+0x280>)
 80002bc:	f44f 70e4 	mov.w	r0, #456	; 0x1c8
 80002c0:	f7ff ff44 	bl	800014c <getMax>
 80002c4:	4603      	mov	r3, r0
 80002c6:	f5b3 7fe4 	cmp.w	r3, #456	; 0x1c8
 80002ca:	d103      	bne.n	80002d4 <main+0xf0>
 80002cc:	4b61      	ldr	r3, [pc, #388]	; (8000454 <main+0x270>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	71da      	strb	r2, [r3, #7]
 80002d2:	e002      	b.n	80002da <main+0xf6>
	else result[7] = 0;
 80002d4:	4b5f      	ldr	r3, [pc, #380]	; (8000454 <main+0x270>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	71da      	strb	r2, [r3, #7]
	if (getMax(-754, 246345) == 246345) result[8] = 1;
 80002da:	4963      	ldr	r1, [pc, #396]	; (8000468 <main+0x284>)
 80002dc:	4863      	ldr	r0, [pc, #396]	; (800046c <main+0x288>)
 80002de:	f7ff ff35 	bl	800014c <getMax>
 80002e2:	4603      	mov	r3, r0
 80002e4:	4a60      	ldr	r2, [pc, #384]	; (8000468 <main+0x284>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d103      	bne.n	80002f2 <main+0x10e>
 80002ea:	4b5a      	ldr	r3, [pc, #360]	; (8000454 <main+0x270>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	721a      	strb	r2, [r3, #8]
 80002f0:	e002      	b.n	80002f8 <main+0x114>
	else result[8] = 0;
 80002f2:	4b58      	ldr	r3, [pc, #352]	; (8000454 <main+0x270>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	721a      	strb	r2, [r3, #8]
	if (getMax(456, -245) == 456) result[9] = 1;
 80002f8:	f06f 01f4 	mvn.w	r1, #244	; 0xf4
 80002fc:	f44f 70e4 	mov.w	r0, #456	; 0x1c8
 8000300:	f7ff ff24 	bl	800014c <getMax>
 8000304:	4603      	mov	r3, r0
 8000306:	f5b3 7fe4 	cmp.w	r3, #456	; 0x1c8
 800030a:	d103      	bne.n	8000314 <main+0x130>
 800030c:	4b51      	ldr	r3, [pc, #324]	; (8000454 <main+0x270>)
 800030e:	2201      	movs	r2, #1
 8000310:	725a      	strb	r2, [r3, #9]
 8000312:	e002      	b.n	800031a <main+0x136>
	else result[9] = 0;
 8000314:	4b4f      	ldr	r3, [pc, #316]	; (8000454 <main+0x270>)
 8000316:	2200      	movs	r2, #0
 8000318:	725a      	strb	r2, [r3, #9]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031a:	f000 fa95 	bl	8000848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031e:	f000 f8b1 	bl	8000484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000322:	f000 f91b 	bl	800055c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000326:	f000 f8ef 	bl	8000508 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for (int i = 0; i< sizeof(result); i++){
 800032a:	2300      	movs	r3, #0
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	e065      	b.n	80003fc <main+0x218>
		  if (result[i]) {
 8000330:	4a48      	ldr	r2, [pc, #288]	; (8000454 <main+0x270>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4413      	add	r3, r2
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d05c      	beq.n	80003f6 <main+0x212>
			  myPrint(huart2, "Test ");
 800033c:	4e4c      	ldr	r6, [pc, #304]	; (8000470 <main+0x28c>)
 800033e:	4b4d      	ldr	r3, [pc, #308]	; (8000474 <main+0x290>)
 8000340:	930d      	str	r3, [sp, #52]	; 0x34
 8000342:	466d      	mov	r5, sp
 8000344:	f106 0410 	add.w	r4, r6, #16
 8000348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800034a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800034c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800034e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000354:	6823      	ldr	r3, [r4, #0]
 8000356:	602b      	str	r3, [r5, #0]
 8000358:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800035c:	f7ff ff08 	bl	8000170 <myPrint>
			  myPrint(huart2, DtoZkette(i));
 8000360:	6878      	ldr	r0, [r7, #4]
 8000362:	f7ff ff2d 	bl	80001c0 <DtoZkette>
 8000366:	4603      	mov	r3, r0
 8000368:	4e41      	ldr	r6, [pc, #260]	; (8000470 <main+0x28c>)
 800036a:	930d      	str	r3, [sp, #52]	; 0x34
 800036c:	466d      	mov	r5, sp
 800036e:	f106 0410 	add.w	r4, r6, #16
 8000372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800037a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800037c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800037e:	6823      	ldr	r3, [r4, #0]
 8000380:	602b      	str	r3, [r5, #0]
 8000382:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000386:	f7ff fef3 	bl	8000170 <myPrint>
			  myPrint(huart2, ": ");
 800038a:	4e39      	ldr	r6, [pc, #228]	; (8000470 <main+0x28c>)
 800038c:	4b3a      	ldr	r3, [pc, #232]	; (8000478 <main+0x294>)
 800038e:	930d      	str	r3, [sp, #52]	; 0x34
 8000390:	466d      	mov	r5, sp
 8000392:	f106 0410 	add.w	r4, r6, #16
 8000396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800039a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800039c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800039e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003a2:	6823      	ldr	r3, [r4, #0]
 80003a4:	602b      	str	r3, [r5, #0]
 80003a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003aa:	f7ff fee1 	bl	8000170 <myPrint>
			  myPrint(huart2, passed);
 80003ae:	4e30      	ldr	r6, [pc, #192]	; (8000470 <main+0x28c>)
 80003b0:	4b32      	ldr	r3, [pc, #200]	; (800047c <main+0x298>)
 80003b2:	930d      	str	r3, [sp, #52]	; 0x34
 80003b4:	466d      	mov	r5, sp
 80003b6:	f106 0410 	add.w	r4, r6, #16
 80003ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003c6:	6823      	ldr	r3, [r4, #0]
 80003c8:	602b      	str	r3, [r5, #0]
 80003ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003ce:	f7ff fecf 	bl	8000170 <myPrint>
			  myPrint(huart2, "\n");
 80003d2:	4e27      	ldr	r6, [pc, #156]	; (8000470 <main+0x28c>)
 80003d4:	4b2a      	ldr	r3, [pc, #168]	; (8000480 <main+0x29c>)
 80003d6:	930d      	str	r3, [sp, #52]	; 0x34
 80003d8:	466d      	mov	r5, sp
 80003da:	f106 0410 	add.w	r4, r6, #16
 80003de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003ea:	6823      	ldr	r3, [r4, #0]
 80003ec:	602b      	str	r3, [r5, #0]
 80003ee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003f2:	f7ff febd 	bl	8000170 <myPrint>
	  for (int i = 0; i< sizeof(result); i++){
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	3301      	adds	r3, #1
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2b09      	cmp	r3, #9
 8000400:	d996      	bls.n	8000330 <main+0x14c>
		  }
	  }
	  myPrint(huart2, "\n");
 8000402:	4e1b      	ldr	r6, [pc, #108]	; (8000470 <main+0x28c>)
 8000404:	4b1e      	ldr	r3, [pc, #120]	; (8000480 <main+0x29c>)
 8000406:	930d      	str	r3, [sp, #52]	; 0x34
 8000408:	466d      	mov	r5, sp
 800040a:	f106 0410 	add.w	r4, r6, #16
 800040e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800041a:	6823      	ldr	r3, [r4, #0]
 800041c:	602b      	str	r3, [r5, #0]
 800041e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000422:	f7ff fea5 	bl	8000170 <myPrint>
	  myPrint(huart2, "\n");
 8000426:	4e12      	ldr	r6, [pc, #72]	; (8000470 <main+0x28c>)
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <main+0x29c>)
 800042a:	930d      	str	r3, [sp, #52]	; 0x34
 800042c:	466d      	mov	r5, sp
 800042e:	f106 0410 	add.w	r4, r6, #16
 8000432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800043a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800043c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800043e:	6823      	ldr	r3, [r4, #0]
 8000440:	602b      	str	r3, [r5, #0]
 8000442:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000446:	f7ff fe93 	bl	8000170 <myPrint>
	  HAL_Delay(10000);
 800044a:	f242 7010 	movw	r0, #10000	; 0x2710
 800044e:	f000 fa5d 	bl	800090c <HAL_Delay>
	  for (int i = 0; i< sizeof(result); i++){
 8000452:	e76a      	b.n	800032a <main+0x146>
 8000454:	20000104 	.word	0x20000104
 8000458:	fffffe58 	.word	0xfffffe58
 800045c:	ffff2adc 	.word	0xffff2adc
 8000460:	ffffee2f 	.word	0xffffee2f
 8000464:	ffffddcb 	.word	0xffffddcb
 8000468:	0003c249 	.word	0x0003c249
 800046c:	fffffd0e 	.word	0xfffffd0e
 8000470:	20000110 	.word	0x20000110
 8000474:	08002384 	.word	0x08002384
 8000478:	0800238c 	.word	0x0800238c
 800047c:	20000000 	.word	0x20000000
 8000480:	08002390 	.word	0x08002390

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b090      	sub	sp, #64	; 0x40
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	2228      	movs	r2, #40	; 0x28
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f001 fb26 	bl	8001ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a6:	2302      	movs	r3, #2
 80004a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004aa:	2301      	movs	r3, #1
 80004ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ae:	2310      	movs	r3, #16
 80004b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004b2:	2302      	movs	r3, #2
 80004b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004b6:	2300      	movs	r3, #0
 80004b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004ba:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c0:	f107 0318 	add.w	r3, r7, #24
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 fd11 	bl	8000eec <HAL_RCC_OscConfig>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004d0:	f000 f8b2 	bl	8000638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d4:	230f      	movs	r3, #15
 80004d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d8:	2302      	movs	r3, #2
 80004da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2102      	movs	r1, #2
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 ff7c 	bl	80013ec <HAL_RCC_ClockConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004fa:	f000 f89d 	bl	8000638 <Error_Handler>
  }
}
 80004fe:	bf00      	nop
 8000500:	3740      	adds	r7, #64	; 0x40
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 800050e:	4a12      	ldr	r2, [pc, #72]	; (8000558 <MX_USART2_UART_Init+0x50>)
 8000510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 8000514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 800052e:	220c      	movs	r2, #12
 8000530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 8000540:	f001 f8ee 	bl	8001720 <HAL_UART_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800054a:	f000 f875 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000110 	.word	0x20000110
 8000558:	40004400 	.word	0x40004400

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000570:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <MX_GPIO_Init+0xcc>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a2c      	ldr	r2, [pc, #176]	; (8000628 <MX_GPIO_Init+0xcc>)
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <MX_GPIO_Init+0xcc>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0310 	and.w	r3, r3, #16
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <MX_GPIO_Init+0xcc>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a26      	ldr	r2, [pc, #152]	; (8000628 <MX_GPIO_Init+0xcc>)
 800058e:	f043 0320 	orr.w	r3, r3, #32
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b24      	ldr	r3, [pc, #144]	; (8000628 <MX_GPIO_Init+0xcc>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0320 	and.w	r3, r3, #32
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a0:	4b21      	ldr	r3, [pc, #132]	; (8000628 <MX_GPIO_Init+0xcc>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a20      	ldr	r2, [pc, #128]	; (8000628 <MX_GPIO_Init+0xcc>)
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <MX_GPIO_Init+0xcc>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_GPIO_Init+0xcc>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <MX_GPIO_Init+0xcc>)
 80005be:	f043 0308 	orr.w	r3, r3, #8
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_GPIO_Init+0xcc>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0308 	and.w	r3, r3, #8
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2120      	movs	r1, #32
 80005d4:	4815      	ldr	r0, [pc, #84]	; (800062c <MX_GPIO_Init+0xd0>)
 80005d6:	f000 fc4f 	bl	8000e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <MX_GPIO_Init+0xd4>)
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	4619      	mov	r1, r3
 80005ee:	4811      	ldr	r0, [pc, #68]	; (8000634 <MX_GPIO_Init+0xd8>)
 80005f0:	f000 fabe 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005f4:	2320      	movs	r3, #32
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2302      	movs	r3, #2
 8000602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	4619      	mov	r1, r3
 800060a:	4808      	ldr	r0, [pc, #32]	; (800062c <MX_GPIO_Init+0xd0>)
 800060c:	f000 fab0 	bl	8000b70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	2100      	movs	r1, #0
 8000614:	2028      	movs	r0, #40	; 0x28
 8000616:	f000 fa74 	bl	8000b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800061a:	2028      	movs	r0, #40	; 0x28
 800061c:	f000 fa8d 	bl	8000b3a <HAL_NVIC_EnableIRQ>

}
 8000620:	bf00      	nop
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40021000 	.word	0x40021000
 800062c:	40010800 	.word	0x40010800
 8000630:	10110000 	.word	0x10110000
 8000634:	40011000 	.word	0x40011000

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	e7fe      	b.n	8000640 <Error_Handler+0x8>
	...

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <HAL_MspInit+0x5c>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <HAL_MspInit+0x5c>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_MspInit+0x5c>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <HAL_MspInit+0x5c>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <HAL_MspInit+0x5c>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <HAL_MspInit+0x5c>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_MspInit+0x60>)
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <HAL_MspInit+0x60>)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40010000 	.word	0x40010000

080006a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a15      	ldr	r2, [pc, #84]	; (8000718 <HAL_UART_MspInit+0x70>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d123      	bne.n	8000710 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <HAL_UART_MspInit+0x74>)
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	4a13      	ldr	r2, [pc, #76]	; (800071c <HAL_UART_MspInit+0x74>)
 80006ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d2:	61d3      	str	r3, [r2, #28]
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <HAL_UART_MspInit+0x74>)
 80006d6:	69db      	ldr	r3, [r3, #28]
 80006d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <HAL_UART_MspInit+0x74>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a0d      	ldr	r2, [pc, #52]	; (800071c <HAL_UART_MspInit+0x74>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <HAL_UART_MspInit+0x74>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006f8:	230c      	movs	r3, #12
 80006fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	2302      	movs	r3, #2
 80006fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <HAL_UART_MspInit+0x78>)
 800070c:	f000 fa30 	bl	8000b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000710:	bf00      	nop
 8000712:	3720      	adds	r7, #32
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40004400 	.word	0x40004400
 800071c:	40021000 	.word	0x40021000
 8000720:	40010800 	.word	0x40010800

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <NMI_Handler+0x4>

0800072a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <HardFault_Handler+0x4>

08000730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <MemManage_Handler+0x4>

08000736 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <BusFault_Handler+0x4>

0800073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <UsageFault_Handler+0x4>

08000742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076a:	f000 f8b3 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}

08000772 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000776:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800077a:	f000 fb95 	bl	8000ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <_sbrk+0x5c>)
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <_sbrk+0x60>)
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <_sbrk+0x64>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <_sbrk+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d207      	bcs.n	80007c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b4:	f001 f96c 	bl	8001a90 <__errno>
 80007b8:	4603      	mov	r3, r0
 80007ba:	220c      	movs	r2, #12
 80007bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	e009      	b.n	80007d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <_sbrk+0x64>)
 80007d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d6:	68fb      	ldr	r3, [r7, #12]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20005000 	.word	0x20005000
 80007e4:	00000400 	.word	0x00000400
 80007e8:	200000f8 	.word	0x200000f8
 80007ec:	20000168 	.word	0x20000168

080007f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007fe:	490d      	ldr	r1, [pc, #52]	; (8000834 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000800:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000814:	4c0a      	ldr	r4, [pc, #40]	; (8000840 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000822:	f7ff ffe5 	bl	80007f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000826:	f001 f939 	bl	8001a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082a:	f7ff fcdb 	bl	80001e4 <main>
  bx lr
 800082e:	4770      	bx	lr
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000838:	080023f8 	.word	0x080023f8
  ldr r2, =_sbss
 800083c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000840:	20000168 	.word	0x20000168

08000844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_2_IRQHandler>
	...

08000848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_Init+0x28>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a07      	ldr	r2, [pc, #28]	; (8000870 <HAL_Init+0x28>)
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000858:	2003      	movs	r0, #3
 800085a:	f000 f947 	bl	8000aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085e:	2000      	movs	r0, #0
 8000860:	f000 f808 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000864:	f7ff feee 	bl	8000644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40022000 	.word	0x40022000

08000874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x54>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x58>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	fbb3 f3f1 	udiv	r3, r3, r1
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f95f 	bl	8000b56 <HAL_SYSTICK_Config>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e00e      	b.n	80008c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d80a      	bhi.n	80008be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f000 f927 	bl	8000b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <HAL_InitTick+0x5c>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000008 	.word	0x20000008
 80008cc:	20000010 	.word	0x20000010
 80008d0:	2000000c 	.word	0x2000000c

080008d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_IncTick+0x1c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_IncTick+0x20>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a03      	ldr	r2, [pc, #12]	; (80008f4 <HAL_IncTick+0x20>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000010 	.word	0x20000010
 80008f4:	20000154 	.word	0x20000154

080008f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b02      	ldr	r3, [pc, #8]	; (8000908 <HAL_GetTick+0x10>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	20000154 	.word	0x20000154

0800090c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000914:	f7ff fff0 	bl	80008f8 <HAL_GetTick>
 8000918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000924:	d005      	beq.n	8000932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <HAL_Delay+0x44>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4413      	add	r3, r2
 8000930:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000932:	bf00      	nop
 8000934:	f7ff ffe0 	bl	80008f8 <HAL_GetTick>
 8000938:	4602      	mov	r2, r0
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	429a      	cmp	r2, r3
 8000942:	d8f7      	bhi.n	8000934 <HAL_Delay+0x28>
  {
  }
}
 8000944:	bf00      	nop
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000010 	.word	0x20000010

08000954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800097c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000986:	4a04      	ldr	r2, [pc, #16]	; (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	60d3      	str	r3, [r2, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <__NVIC_GetPriorityGrouping+0x18>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	f003 0307 	and.w	r3, r3, #7
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	db0b      	blt.n	80009e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 021f 	and.w	r2, r3, #31
 80009d0:	4906      	ldr	r1, [pc, #24]	; (80009ec <__NVIC_EnableIRQ+0x34>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	095b      	lsrs	r3, r3, #5
 80009d8:	2001      	movs	r0, #1
 80009da:	fa00 f202 	lsl.w	r2, r0, r2
 80009de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	e000e100 	.word	0xe000e100

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db0a      	blt.n	8000a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	490c      	ldr	r1, [pc, #48]	; (8000a3c <__NVIC_SetPriority+0x4c>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a18:	e00a      	b.n	8000a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4908      	ldr	r1, [pc, #32]	; (8000a40 <__NVIC_SetPriority+0x50>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	3b04      	subs	r3, #4
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	761a      	strb	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	; 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f1c3 0307 	rsb	r3, r3, #7
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	bf28      	it	cs
 8000a62:	2304      	movcs	r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d902      	bls.n	8000a74 <NVIC_EncodePriority+0x30>
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3b03      	subs	r3, #3
 8000a72:	e000      	b.n	8000a76 <NVIC_EncodePriority+0x32>
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43da      	mvns	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	401a      	ands	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4313      	orrs	r3, r2
         );
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	; 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab8:	d301      	bcc.n	8000abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00f      	b.n	8000ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <SysTick_Config+0x40>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f7ff ff90 	bl	80009f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <SysTick_Config+0x40>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad6:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <SysTick_Config+0x40>)
 8000ad8:	2207      	movs	r2, #7
 8000ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	e000e010 	.word	0xe000e010

08000aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ff2d 	bl	8000954 <__NVIC_SetPriorityGrouping>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b086      	sub	sp, #24
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b14:	f7ff ff42 	bl	800099c <__NVIC_GetPriorityGrouping>
 8000b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	6978      	ldr	r0, [r7, #20]
 8000b20:	f7ff ff90 	bl	8000a44 <NVIC_EncodePriority>
 8000b24:	4602      	mov	r2, r0
 8000b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff5f 	bl	80009f0 <__NVIC_SetPriority>
}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff35 	bl	80009b8 <__NVIC_EnableIRQ>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ffa2 	bl	8000aa8 <SysTick_Config>
 8000b64:	4603      	mov	r3, r0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b08b      	sub	sp, #44	; 0x2c
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b82:	e169      	b.n	8000e58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b84:	2201      	movs	r2, #1
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	69fa      	ldr	r2, [r7, #28]
 8000b94:	4013      	ands	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	f040 8158 	bne.w	8000e52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	4a9a      	ldr	r2, [pc, #616]	; (8000e10 <HAL_GPIO_Init+0x2a0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d05e      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bac:	4a98      	ldr	r2, [pc, #608]	; (8000e10 <HAL_GPIO_Init+0x2a0>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d875      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bb2:	4a98      	ldr	r2, [pc, #608]	; (8000e14 <HAL_GPIO_Init+0x2a4>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d058      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bb8:	4a96      	ldr	r2, [pc, #600]	; (8000e14 <HAL_GPIO_Init+0x2a4>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d86f      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bbe:	4a96      	ldr	r2, [pc, #600]	; (8000e18 <HAL_GPIO_Init+0x2a8>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d052      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bc4:	4a94      	ldr	r2, [pc, #592]	; (8000e18 <HAL_GPIO_Init+0x2a8>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d869      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bca:	4a94      	ldr	r2, [pc, #592]	; (8000e1c <HAL_GPIO_Init+0x2ac>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d04c      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bd0:	4a92      	ldr	r2, [pc, #584]	; (8000e1c <HAL_GPIO_Init+0x2ac>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d863      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bd6:	4a92      	ldr	r2, [pc, #584]	; (8000e20 <HAL_GPIO_Init+0x2b0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d046      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bdc:	4a90      	ldr	r2, [pc, #576]	; (8000e20 <HAL_GPIO_Init+0x2b0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d85d      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000be2:	2b12      	cmp	r3, #18
 8000be4:	d82a      	bhi.n	8000c3c <HAL_GPIO_Init+0xcc>
 8000be6:	2b12      	cmp	r3, #18
 8000be8:	d859      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bea:	a201      	add	r2, pc, #4	; (adr r2, 8000bf0 <HAL_GPIO_Init+0x80>)
 8000bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf0:	08000c6b 	.word	0x08000c6b
 8000bf4:	08000c45 	.word	0x08000c45
 8000bf8:	08000c57 	.word	0x08000c57
 8000bfc:	08000c99 	.word	0x08000c99
 8000c00:	08000c9f 	.word	0x08000c9f
 8000c04:	08000c9f 	.word	0x08000c9f
 8000c08:	08000c9f 	.word	0x08000c9f
 8000c0c:	08000c9f 	.word	0x08000c9f
 8000c10:	08000c9f 	.word	0x08000c9f
 8000c14:	08000c9f 	.word	0x08000c9f
 8000c18:	08000c9f 	.word	0x08000c9f
 8000c1c:	08000c9f 	.word	0x08000c9f
 8000c20:	08000c9f 	.word	0x08000c9f
 8000c24:	08000c9f 	.word	0x08000c9f
 8000c28:	08000c9f 	.word	0x08000c9f
 8000c2c:	08000c9f 	.word	0x08000c9f
 8000c30:	08000c9f 	.word	0x08000c9f
 8000c34:	08000c4d 	.word	0x08000c4d
 8000c38:	08000c61 	.word	0x08000c61
 8000c3c:	4a79      	ldr	r2, [pc, #484]	; (8000e24 <HAL_GPIO_Init+0x2b4>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d013      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c42:	e02c      	b.n	8000c9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	623b      	str	r3, [r7, #32]
          break;
 8000c4a:	e029      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	3304      	adds	r3, #4
 8000c52:	623b      	str	r3, [r7, #32]
          break;
 8000c54:	e024      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	3308      	adds	r3, #8
 8000c5c:	623b      	str	r3, [r7, #32]
          break;
 8000c5e:	e01f      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	330c      	adds	r3, #12
 8000c66:	623b      	str	r3, [r7, #32]
          break;
 8000c68:	e01a      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c72:	2304      	movs	r3, #4
 8000c74:	623b      	str	r3, [r7, #32]
          break;
 8000c76:	e013      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d105      	bne.n	8000c8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c80:	2308      	movs	r3, #8
 8000c82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69fa      	ldr	r2, [r7, #28]
 8000c88:	611a      	str	r2, [r3, #16]
          break;
 8000c8a:	e009      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	615a      	str	r2, [r3, #20]
          break;
 8000c96:	e003      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
          break;
 8000c9c:	e000      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          break;
 8000c9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	2bff      	cmp	r3, #255	; 0xff
 8000ca4:	d801      	bhi.n	8000caa <HAL_GPIO_Init+0x13a>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	e001      	b.n	8000cae <HAL_GPIO_Init+0x13e>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3304      	adds	r3, #4
 8000cae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	2bff      	cmp	r3, #255	; 0xff
 8000cb4:	d802      	bhi.n	8000cbc <HAL_GPIO_Init+0x14c>
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	e002      	b.n	8000cc2 <HAL_GPIO_Init+0x152>
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	3b08      	subs	r3, #8
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	210f      	movs	r1, #15
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	6a39      	ldr	r1, [r7, #32]
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 80b1 	beq.w	8000e52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cf0:	4b4d      	ldr	r3, [pc, #308]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a4c      	ldr	r2, [pc, #304]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b4a      	ldr	r3, [pc, #296]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d08:	4a48      	ldr	r2, [pc, #288]	; (8000e2c <HAL_GPIO_Init+0x2bc>)
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a40      	ldr	r2, [pc, #256]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d013      	beq.n	8000d5c <HAL_GPIO_Init+0x1ec>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a3f      	ldr	r2, [pc, #252]	; (8000e34 <HAL_GPIO_Init+0x2c4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d00d      	beq.n	8000d58 <HAL_GPIO_Init+0x1e8>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a3e      	ldr	r2, [pc, #248]	; (8000e38 <HAL_GPIO_Init+0x2c8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d007      	beq.n	8000d54 <HAL_GPIO_Init+0x1e4>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a3d      	ldr	r2, [pc, #244]	; (8000e3c <HAL_GPIO_Init+0x2cc>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d101      	bne.n	8000d50 <HAL_GPIO_Init+0x1e0>
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e006      	b.n	8000d5e <HAL_GPIO_Init+0x1ee>
 8000d50:	2304      	movs	r3, #4
 8000d52:	e004      	b.n	8000d5e <HAL_GPIO_Init+0x1ee>
 8000d54:	2302      	movs	r3, #2
 8000d56:	e002      	b.n	8000d5e <HAL_GPIO_Init+0x1ee>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <HAL_GPIO_Init+0x1ee>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d60:	f002 0203 	and.w	r2, r2, #3
 8000d64:	0092      	lsls	r2, r2, #2
 8000d66:	4093      	lsls	r3, r2
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d6e:	492f      	ldr	r1, [pc, #188]	; (8000e2c <HAL_GPIO_Init+0x2bc>)
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3302      	adds	r3, #2
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	492c      	ldr	r1, [pc, #176]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	600b      	str	r3, [r1, #0]
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d96:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	4928      	ldr	r1, [pc, #160]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d006      	beq.n	8000dbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000db0:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	4922      	ldr	r1, [pc, #136]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	604b      	str	r3, [r1, #4]
 8000dbc:	e006      	b.n	8000dcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	491e      	ldr	r1, [pc, #120]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	4918      	ldr	r1, [pc, #96]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	608b      	str	r3, [r1, #8]
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	4914      	ldr	r1, [pc, #80]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d021      	beq.n	8000e44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	490e      	ldr	r1, [pc, #56]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	60cb      	str	r3, [r1, #12]
 8000e0c:	e021      	b.n	8000e52 <HAL_GPIO_Init+0x2e2>
 8000e0e:	bf00      	nop
 8000e10:	10320000 	.word	0x10320000
 8000e14:	10310000 	.word	0x10310000
 8000e18:	10220000 	.word	0x10220000
 8000e1c:	10210000 	.word	0x10210000
 8000e20:	10120000 	.word	0x10120000
 8000e24:	10110000 	.word	0x10110000
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010000 	.word	0x40010000
 8000e30:	40010800 	.word	0x40010800
 8000e34:	40010c00 	.word	0x40010c00
 8000e38:	40011000 	.word	0x40011000
 8000e3c:	40011400 	.word	0x40011400
 8000e40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_GPIO_Init+0x304>)
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	4909      	ldr	r1, [pc, #36]	; (8000e74 <HAL_GPIO_Init+0x304>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	3301      	adds	r3, #1
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f47f ae8e 	bne.w	8000b84 <HAL_GPIO_Init+0x14>
  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	372c      	adds	r7, #44	; 0x2c
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	40010400 	.word	0x40010400

08000e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
 8000e84:	4613      	mov	r3, r2
 8000e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e88:	787b      	ldrb	r3, [r7, #1]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e8e:	887a      	ldrh	r2, [r7, #2]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e94:	e003      	b.n	8000e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	041a      	lsls	r2, r3, #16
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	611a      	str	r2, [r3, #16]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000eb4:	695a      	ldr	r2, [r3, #20]
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d006      	beq.n	8000ecc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f806 	bl	8000ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40010400 	.word	0x40010400

08000ed8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e26c      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 8087 	beq.w	800101a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f0c:	4b92      	ldr	r3, [pc, #584]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d00c      	beq.n	8000f32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f18:	4b8f      	ldr	r3, [pc, #572]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d112      	bne.n	8000f4a <HAL_RCC_OscConfig+0x5e>
 8000f24:	4b8c      	ldr	r3, [pc, #560]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f30:	d10b      	bne.n	8000f4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f32:	4b89      	ldr	r3, [pc, #548]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d06c      	beq.n	8001018 <HAL_RCC_OscConfig+0x12c>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d168      	bne.n	8001018 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e246      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f52:	d106      	bne.n	8000f62 <HAL_RCC_OscConfig+0x76>
 8000f54:	4b80      	ldr	r3, [pc, #512]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a7f      	ldr	r2, [pc, #508]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e02e      	b.n	8000fc0 <HAL_RCC_OscConfig+0xd4>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0x98>
 8000f6a:	4b7b      	ldr	r3, [pc, #492]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a7a      	ldr	r2, [pc, #488]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b78      	ldr	r3, [pc, #480]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a77      	ldr	r2, [pc, #476]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e01d      	b.n	8000fc0 <HAL_RCC_OscConfig+0xd4>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_RCC_OscConfig+0xbc>
 8000f8e:	4b72      	ldr	r3, [pc, #456]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a71      	ldr	r2, [pc, #452]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	4b6f      	ldr	r3, [pc, #444]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a6e      	ldr	r2, [pc, #440]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e00b      	b.n	8000fc0 <HAL_RCC_OscConfig+0xd4>
 8000fa8:	4b6b      	ldr	r3, [pc, #428]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a6a      	ldr	r2, [pc, #424]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b68      	ldr	r3, [pc, #416]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a67      	ldr	r2, [pc, #412]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d013      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fc96 	bl	80008f8 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fc92 	bl	80008f8 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	; 0x64
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e1fa      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe2:	4b5d      	ldr	r3, [pc, #372]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f0      	beq.n	8000fd0 <HAL_RCC_OscConfig+0xe4>
 8000fee:	e014      	b.n	800101a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fc82 	bl	80008f8 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fc7e 	bl	80008f8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b64      	cmp	r3, #100	; 0x64
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e1e6      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100a:	4b53      	ldr	r3, [pc, #332]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x10c>
 8001016:	e000      	b.n	800101a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d063      	beq.n	80010ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001026:	4b4c      	ldr	r3, [pc, #304]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00b      	beq.n	800104a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001032:	4b49      	ldr	r3, [pc, #292]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b08      	cmp	r3, #8
 800103c:	d11c      	bne.n	8001078 <HAL_RCC_OscConfig+0x18c>
 800103e:	4b46      	ldr	r3, [pc, #280]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d116      	bne.n	8001078 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104a:	4b43      	ldr	r3, [pc, #268]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <HAL_RCC_OscConfig+0x176>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d001      	beq.n	8001062 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e1ba      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001062:	4b3d      	ldr	r3, [pc, #244]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4939      	ldr	r1, [pc, #228]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001072:	4313      	orrs	r3, r2
 8001074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001076:	e03a      	b.n	80010ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d020      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001080:	4b36      	ldr	r3, [pc, #216]	; (800115c <HAL_RCC_OscConfig+0x270>)
 8001082:	2201      	movs	r2, #1
 8001084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001086:	f7ff fc37 	bl	80008f8 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108e:	f7ff fc33 	bl	80008f8 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e19b      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a0:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0f0      	beq.n	800108e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ac:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4927      	ldr	r1, [pc, #156]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	600b      	str	r3, [r1, #0]
 80010c0:	e015      	b.n	80010ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c2:	4b26      	ldr	r3, [pc, #152]	; (800115c <HAL_RCC_OscConfig+0x270>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fc16 	bl	80008f8 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d0:	f7ff fc12 	bl	80008f8 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e17a      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d03a      	beq.n	8001170 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d019      	beq.n	8001136 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_RCC_OscConfig+0x274>)
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001108:	f7ff fbf6 	bl	80008f8 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001110:	f7ff fbf2 	bl	80008f8 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e15a      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f0      	beq.n	8001110 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800112e:	2001      	movs	r0, #1
 8001130:	f000 fad8 	bl	80016e4 <RCC_Delay>
 8001134:	e01c      	b.n	8001170 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_RCC_OscConfig+0x274>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113c:	f7ff fbdc 	bl	80008f8 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001142:	e00f      	b.n	8001164 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001144:	f7ff fbd8 	bl	80008f8 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d908      	bls.n	8001164 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e140      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000
 800115c:	42420000 	.word	0x42420000
 8001160:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001164:	4b9e      	ldr	r3, [pc, #632]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1e9      	bne.n	8001144 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 80a6 	beq.w	80012ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001182:	4b97      	ldr	r3, [pc, #604]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10d      	bne.n	80011aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b94      	ldr	r3, [pc, #592]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a93      	ldr	r2, [pc, #588]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	61d3      	str	r3, [r2, #28]
 800119a:	4b91      	ldr	r3, [pc, #580]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011a6:	2301      	movs	r3, #1
 80011a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011aa:	4b8e      	ldr	r3, [pc, #568]	; (80013e4 <HAL_RCC_OscConfig+0x4f8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d118      	bne.n	80011e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011b6:	4b8b      	ldr	r3, [pc, #556]	; (80013e4 <HAL_RCC_OscConfig+0x4f8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a8a      	ldr	r2, [pc, #552]	; (80013e4 <HAL_RCC_OscConfig+0x4f8>)
 80011bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011c2:	f7ff fb99 	bl	80008f8 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ca:	f7ff fb95 	bl	80008f8 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b64      	cmp	r3, #100	; 0x64
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e0fd      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011dc:	4b81      	ldr	r3, [pc, #516]	; (80013e4 <HAL_RCC_OscConfig+0x4f8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d106      	bne.n	80011fe <HAL_RCC_OscConfig+0x312>
 80011f0:	4b7b      	ldr	r3, [pc, #492]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4a7a      	ldr	r2, [pc, #488]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6213      	str	r3, [r2, #32]
 80011fc:	e02d      	b.n	800125a <HAL_RCC_OscConfig+0x36e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0x334>
 8001206:	4b76      	ldr	r3, [pc, #472]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	4a75      	ldr	r2, [pc, #468]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	6213      	str	r3, [r2, #32]
 8001212:	4b73      	ldr	r3, [pc, #460]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	4a72      	ldr	r2, [pc, #456]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001218:	f023 0304 	bic.w	r3, r3, #4
 800121c:	6213      	str	r3, [r2, #32]
 800121e:	e01c      	b.n	800125a <HAL_RCC_OscConfig+0x36e>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	2b05      	cmp	r3, #5
 8001226:	d10c      	bne.n	8001242 <HAL_RCC_OscConfig+0x356>
 8001228:	4b6d      	ldr	r3, [pc, #436]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4a6c      	ldr	r2, [pc, #432]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	6213      	str	r3, [r2, #32]
 8001234:	4b6a      	ldr	r3, [pc, #424]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4a69      	ldr	r2, [pc, #420]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6213      	str	r3, [r2, #32]
 8001240:	e00b      	b.n	800125a <HAL_RCC_OscConfig+0x36e>
 8001242:	4b67      	ldr	r3, [pc, #412]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	4a66      	ldr	r2, [pc, #408]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	6213      	str	r3, [r2, #32]
 800124e:	4b64      	ldr	r3, [pc, #400]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4a63      	ldr	r2, [pc, #396]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001254:	f023 0304 	bic.w	r3, r3, #4
 8001258:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d015      	beq.n	800128e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001262:	f7ff fb49 	bl	80008f8 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001268:	e00a      	b.n	8001280 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126a:	f7ff fb45 	bl	80008f8 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	f241 3288 	movw	r2, #5000	; 0x1388
 8001278:	4293      	cmp	r3, r2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e0ab      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001280:	4b57      	ldr	r3, [pc, #348]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0ee      	beq.n	800126a <HAL_RCC_OscConfig+0x37e>
 800128c:	e014      	b.n	80012b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128e:	f7ff fb33 	bl	80008f8 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001294:	e00a      	b.n	80012ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001296:	f7ff fb2f 	bl	80008f8 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e095      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ac:	4b4c      	ldr	r3, [pc, #304]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1ee      	bne.n	8001296 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d105      	bne.n	80012ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012be:	4b48      	ldr	r3, [pc, #288]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a47      	ldr	r2, [pc, #284]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 8081 	beq.w	80013d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012d4:	4b42      	ldr	r3, [pc, #264]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	2b08      	cmp	r3, #8
 80012de:	d061      	beq.n	80013a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d146      	bne.n	8001376 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e8:	4b3f      	ldr	r3, [pc, #252]	; (80013e8 <HAL_RCC_OscConfig+0x4fc>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fb03 	bl	80008f8 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff faff 	bl	80008f8 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e067      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001308:	4b35      	ldr	r3, [pc, #212]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f0      	bne.n	80012f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131c:	d108      	bne.n	8001330 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800131e:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	492d      	ldr	r1, [pc, #180]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a19      	ldr	r1, [r3, #32]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	430b      	orrs	r3, r1
 8001342:	4927      	ldr	r1, [pc, #156]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <HAL_RCC_OscConfig+0x4fc>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff fad3 	bl	80008f8 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001356:	f7ff facf 	bl	80008f8 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e037      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x46a>
 8001374:	e02f      	b.n	80013d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <HAL_RCC_OscConfig+0x4fc>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fabc 	bl	80008f8 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001384:	f7ff fab8 	bl	80008f8 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e020      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x498>
 80013a2:	e018      	b.n	80013d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e013      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d001      	beq.n	80013d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40007000 	.word	0x40007000
 80013e8:	42420060 	.word	0x42420060

080013ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e0d0      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001400:	4b6a      	ldr	r3, [pc, #424]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d910      	bls.n	8001430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140e:	4b67      	ldr	r3, [pc, #412]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 0207 	bic.w	r2, r3, #7
 8001416:	4965      	ldr	r1, [pc, #404]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800141e:	4b63      	ldr	r3, [pc, #396]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d001      	beq.n	8001430 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0b8      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d020      	beq.n	800147e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001448:	4b59      	ldr	r3, [pc, #356]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	4a58      	ldr	r2, [pc, #352]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 800144e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001452:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d005      	beq.n	800146c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4a52      	ldr	r2, [pc, #328]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001466:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800146a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800146c:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	494d      	ldr	r1, [pc, #308]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d040      	beq.n	800150c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001492:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d115      	bne.n	80014ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e07f      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d107      	bne.n	80014ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014aa:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d109      	bne.n	80014ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e073      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ba:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e06b      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ca:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f023 0203 	bic.w	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4936      	ldr	r1, [pc, #216]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014dc:	f7ff fa0c 	bl	80008f8 <HAL_GetTick>
 80014e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e4:	f7ff fa08 	bl	80008f8 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e053      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fa:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 020c 	and.w	r2, r3, #12
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	429a      	cmp	r2, r3
 800150a:	d1eb      	bne.n	80014e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d210      	bcs.n	800153c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151a:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f023 0207 	bic.w	r2, r3, #7
 8001522:	4922      	ldr	r1, [pc, #136]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d001      	beq.n	800153c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e032      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4916      	ldr	r1, [pc, #88]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d009      	beq.n	800157a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	490e      	ldr	r1, [pc, #56]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800157a:	f000 f821 	bl	80015c0 <HAL_RCC_GetSysClockFreq>
 800157e:	4602      	mov	r2, r0
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	490a      	ldr	r1, [pc, #40]	; (80015b4 <HAL_RCC_ClockConfig+0x1c8>)
 800158c:	5ccb      	ldrb	r3, [r1, r3]
 800158e:	fa22 f303 	lsr.w	r3, r2, r3
 8001592:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_RCC_ClockConfig+0x1d0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff f96a 	bl	8000874 <HAL_InitTick>

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40022000 	.word	0x40022000
 80015b0:	40021000 	.word	0x40021000
 80015b4:	080023a4 	.word	0x080023a4
 80015b8:	20000008 	.word	0x20000008
 80015bc:	2000000c 	.word	0x2000000c

080015c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c0:	b490      	push	{r4, r7}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015c6:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015c8:	1d3c      	adds	r4, r7, #4
 80015ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015d0:	f240 2301 	movw	r3, #513	; 0x201
 80015d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d002      	beq.n	8001600 <HAL_RCC_GetSysClockFreq+0x40>
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d003      	beq.n	8001606 <HAL_RCC_GetSysClockFreq+0x46>
 80015fe:	e02d      	b.n	800165c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001602:	623b      	str	r3, [r7, #32]
      break;
 8001604:	e02d      	b.n	8001662 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	0c9b      	lsrs	r3, r3, #18
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001612:	4413      	add	r3, r2
 8001614:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001618:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d013      	beq.n	800164c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	0c5b      	lsrs	r3, r3, #17
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001632:	4413      	add	r3, r2
 8001634:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001638:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_RCC_GetSysClockFreq+0xb8>)
 800163e:	fb02 f203 	mul.w	r2, r2, r3
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
 800164a:	e004      	b.n	8001656 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001650:	fb02 f303 	mul.w	r3, r2, r3
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	623b      	str	r3, [r7, #32]
      break;
 800165a:	e002      	b.n	8001662 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_RCC_GetSysClockFreq+0xb8>)
 800165e:	623b      	str	r3, [r7, #32]
      break;
 8001660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001662:	6a3b      	ldr	r3, [r7, #32]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3728      	adds	r7, #40	; 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bc90      	pop	{r4, r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	08002394 	.word	0x08002394
 8001674:	40021000 	.word	0x40021000
 8001678:	007a1200 	.word	0x007a1200
 800167c:	003d0900 	.word	0x003d0900

08001680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001684:	4b02      	ldr	r3, [pc, #8]	; (8001690 <HAL_RCC_GetHCLKFreq+0x10>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	20000008 	.word	0x20000008

08001694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001698:	f7ff fff2 	bl	8001680 <HAL_RCC_GetHCLKFreq>
 800169c:	4602      	mov	r2, r0
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	4903      	ldr	r1, [pc, #12]	; (80016b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016aa:	5ccb      	ldrb	r3, [r1, r3]
 80016ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40021000 	.word	0x40021000
 80016b8:	080023b4 	.word	0x080023b4

080016bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016c0:	f7ff ffde 	bl	8001680 <HAL_RCC_GetHCLKFreq>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	0adb      	lsrs	r3, r3, #11
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	4903      	ldr	r1, [pc, #12]	; (80016e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016d2:	5ccb      	ldrb	r3, [r1, r3]
 80016d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016d8:	4618      	mov	r0, r3
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000
 80016e0:	080023b4 	.word	0x080023b4

080016e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <RCC_Delay+0x34>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <RCC_Delay+0x38>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0a5b      	lsrs	r3, r3, #9
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	fb02 f303 	mul.w	r3, r2, r3
 80016fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001700:	bf00      	nop
  }
  while (Delay --);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1e5a      	subs	r2, r3, #1
 8001706:	60fa      	str	r2, [r7, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f9      	bne.n	8001700 <RCC_Delay+0x1c>
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	20000008 	.word	0x20000008
 800171c:	10624dd3 	.word	0x10624dd3

08001720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e03f      	b.n	80017b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d106      	bne.n	800174c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7fe ffae 	bl	80006a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2224      	movs	r2, #36	; 0x24
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f905 	bl	8001974 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2220      	movs	r2, #32
 80017a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2220      	movs	r2, #32
 80017ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b08a      	sub	sp, #40	; 0x28
 80017be:	af02      	add	r7, sp, #8
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	4613      	mov	r3, r2
 80017c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b20      	cmp	r3, #32
 80017d8:	d17c      	bne.n	80018d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <HAL_UART_Transmit+0x2c>
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e075      	b.n	80018d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_UART_Transmit+0x3e>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e06e      	b.n	80018d6 <HAL_UART_Transmit+0x11c>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2221      	movs	r2, #33	; 0x21
 800180a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800180e:	f7ff f873 	bl	80008f8 <HAL_GetTick>
 8001812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	88fa      	ldrh	r2, [r7, #6]
 8001818:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	88fa      	ldrh	r2, [r7, #6]
 800181e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001828:	d108      	bne.n	800183c <HAL_UART_Transmit+0x82>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d104      	bne.n	800183c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	61bb      	str	r3, [r7, #24]
 800183a:	e003      	b.n	8001844 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800184c:	e02a      	b.n	80018a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2200      	movs	r2, #0
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 f840 	bl	80018de <UART_WaitOnFlagUntilTimeout>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e036      	b.n	80018d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10b      	bne.n	8001886 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800187c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	3302      	adds	r3, #2
 8001882:	61bb      	str	r3, [r7, #24]
 8001884:	e007      	b.n	8001896 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	781a      	ldrb	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	3301      	adds	r3, #1
 8001894:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800189a:	b29b      	uxth	r3, r3
 800189c:	3b01      	subs	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1cf      	bne.n	800184e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2200      	movs	r2, #0
 80018b6:	2140      	movs	r1, #64	; 0x40
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 f810 	bl	80018de <UART_WaitOnFlagUntilTimeout>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e006      	b.n	80018d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2220      	movs	r2, #32
 80018cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	e000      	b.n	80018d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80018d4:	2302      	movs	r3, #2
  }
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3720      	adds	r7, #32
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	4613      	mov	r3, r2
 80018ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018ee:	e02c      	b.n	800194a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f6:	d028      	beq.n	800194a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d007      	beq.n	800190e <UART_WaitOnFlagUntilTimeout+0x30>
 80018fe:	f7fe fffb 	bl	80008f8 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	429a      	cmp	r2, r3
 800190c:	d21d      	bcs.n	800194a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800191c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0201 	bic.w	r2, r2, #1
 800192c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2220      	movs	r2, #32
 8001932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2220      	movs	r2, #32
 800193a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e00f      	b.n	800196a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4013      	ands	r3, r2
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	429a      	cmp	r2, r3
 8001958:	bf0c      	ite	eq
 800195a:	2301      	moveq	r3, #1
 800195c:	2300      	movne	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	429a      	cmp	r2, r3
 8001966:	d0c3      	beq.n	80018f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80019ae:	f023 030c 	bic.w	r3, r3, #12
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699a      	ldr	r2, [r3, #24]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a2c      	ldr	r2, [pc, #176]	; (8001a88 <UART_SetConfig+0x114>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d103      	bne.n	80019e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80019dc:	f7ff fe6e 	bl	80016bc <HAL_RCC_GetPCLK2Freq>
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	e002      	b.n	80019ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80019e4:	f7ff fe56 	bl	8001694 <HAL_RCC_GetPCLK1Freq>
 80019e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009a      	lsls	r2, r3, #2
 80019f4:	441a      	add	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a00:	4a22      	ldr	r2, [pc, #136]	; (8001a8c <UART_SetConfig+0x118>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	0119      	lsls	r1, r3, #4
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	009a      	lsls	r2, r3, #2
 8001a14:	441a      	add	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <UART_SetConfig+0x118>)
 8001a22:	fba3 0302 	umull	r0, r3, r3, r2
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2064      	movs	r0, #100	; 0x64
 8001a2a:	fb00 f303 	mul.w	r3, r0, r3
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	3332      	adds	r3, #50	; 0x32
 8001a34:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <UART_SetConfig+0x118>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a40:	4419      	add	r1, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	009a      	lsls	r2, r3, #2
 8001a4c:	441a      	add	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <UART_SetConfig+0x118>)
 8001a5a:	fba3 0302 	umull	r0, r3, r3, r2
 8001a5e:	095b      	lsrs	r3, r3, #5
 8001a60:	2064      	movs	r0, #100	; 0x64
 8001a62:	fb00 f303 	mul.w	r3, r0, r3
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	3332      	adds	r3, #50	; 0x32
 8001a6c:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <UART_SetConfig+0x118>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	f003 020f 	and.w	r2, r3, #15
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	440a      	add	r2, r1
 8001a7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	51eb851f 	.word	0x51eb851f

08001a90 <__errno>:
 8001a90:	4b01      	ldr	r3, [pc, #4]	; (8001a98 <__errno+0x8>)
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000014 	.word	0x20000014

08001a9c <__libc_init_array>:
 8001a9c:	b570      	push	{r4, r5, r6, lr}
 8001a9e:	2600      	movs	r6, #0
 8001aa0:	4d0c      	ldr	r5, [pc, #48]	; (8001ad4 <__libc_init_array+0x38>)
 8001aa2:	4c0d      	ldr	r4, [pc, #52]	; (8001ad8 <__libc_init_array+0x3c>)
 8001aa4:	1b64      	subs	r4, r4, r5
 8001aa6:	10a4      	asrs	r4, r4, #2
 8001aa8:	42a6      	cmp	r6, r4
 8001aaa:	d109      	bne.n	8001ac0 <__libc_init_array+0x24>
 8001aac:	f000 fc5c 	bl	8002368 <_init>
 8001ab0:	2600      	movs	r6, #0
 8001ab2:	4d0a      	ldr	r5, [pc, #40]	; (8001adc <__libc_init_array+0x40>)
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	; (8001ae0 <__libc_init_array+0x44>)
 8001ab6:	1b64      	subs	r4, r4, r5
 8001ab8:	10a4      	asrs	r4, r4, #2
 8001aba:	42a6      	cmp	r6, r4
 8001abc:	d105      	bne.n	8001aca <__libc_init_array+0x2e>
 8001abe:	bd70      	pop	{r4, r5, r6, pc}
 8001ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ac4:	4798      	blx	r3
 8001ac6:	3601      	adds	r6, #1
 8001ac8:	e7ee      	b.n	8001aa8 <__libc_init_array+0xc>
 8001aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ace:	4798      	blx	r3
 8001ad0:	3601      	adds	r6, #1
 8001ad2:	e7f2      	b.n	8001aba <__libc_init_array+0x1e>
 8001ad4:	080023f0 	.word	0x080023f0
 8001ad8:	080023f0 	.word	0x080023f0
 8001adc:	080023f0 	.word	0x080023f0
 8001ae0:	080023f4 	.word	0x080023f4

08001ae4 <memset>:
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4402      	add	r2, r0
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d100      	bne.n	8001aee <memset+0xa>
 8001aec:	4770      	bx	lr
 8001aee:	f803 1b01 	strb.w	r1, [r3], #1
 8001af2:	e7f9      	b.n	8001ae8 <memset+0x4>

08001af4 <siprintf>:
 8001af4:	b40e      	push	{r1, r2, r3}
 8001af6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001afa:	b500      	push	{lr}
 8001afc:	b09c      	sub	sp, #112	; 0x70
 8001afe:	ab1d      	add	r3, sp, #116	; 0x74
 8001b00:	9002      	str	r0, [sp, #8]
 8001b02:	9006      	str	r0, [sp, #24]
 8001b04:	9107      	str	r1, [sp, #28]
 8001b06:	9104      	str	r1, [sp, #16]
 8001b08:	4808      	ldr	r0, [pc, #32]	; (8001b2c <siprintf+0x38>)
 8001b0a:	4909      	ldr	r1, [pc, #36]	; (8001b30 <siprintf+0x3c>)
 8001b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001b10:	9105      	str	r1, [sp, #20]
 8001b12:	6800      	ldr	r0, [r0, #0]
 8001b14:	a902      	add	r1, sp, #8
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	f000 f868 	bl	8001bec <_svfiprintf_r>
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	9b02      	ldr	r3, [sp, #8]
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	b01c      	add	sp, #112	; 0x70
 8001b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b28:	b003      	add	sp, #12
 8001b2a:	4770      	bx	lr
 8001b2c:	20000014 	.word	0x20000014
 8001b30:	ffff0208 	.word	0xffff0208

08001b34 <__ssputs_r>:
 8001b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b38:	688e      	ldr	r6, [r1, #8]
 8001b3a:	4682      	mov	sl, r0
 8001b3c:	429e      	cmp	r6, r3
 8001b3e:	460c      	mov	r4, r1
 8001b40:	4690      	mov	r8, r2
 8001b42:	461f      	mov	r7, r3
 8001b44:	d838      	bhi.n	8001bb8 <__ssputs_r+0x84>
 8001b46:	898a      	ldrh	r2, [r1, #12]
 8001b48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001b4c:	d032      	beq.n	8001bb4 <__ssputs_r+0x80>
 8001b4e:	6825      	ldr	r5, [r4, #0]
 8001b50:	6909      	ldr	r1, [r1, #16]
 8001b52:	3301      	adds	r3, #1
 8001b54:	eba5 0901 	sub.w	r9, r5, r1
 8001b58:	6965      	ldr	r5, [r4, #20]
 8001b5a:	444b      	add	r3, r9
 8001b5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001b64:	106d      	asrs	r5, r5, #1
 8001b66:	429d      	cmp	r5, r3
 8001b68:	bf38      	it	cc
 8001b6a:	461d      	movcc	r5, r3
 8001b6c:	0553      	lsls	r3, r2, #21
 8001b6e:	d531      	bpl.n	8001bd4 <__ssputs_r+0xa0>
 8001b70:	4629      	mov	r1, r5
 8001b72:	f000 fb53 	bl	800221c <_malloc_r>
 8001b76:	4606      	mov	r6, r0
 8001b78:	b950      	cbnz	r0, 8001b90 <__ssputs_r+0x5c>
 8001b7a:	230c      	movs	r3, #12
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f8ca 3000 	str.w	r3, [sl]
 8001b84:	89a3      	ldrh	r3, [r4, #12]
 8001b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b8a:	81a3      	strh	r3, [r4, #12]
 8001b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b90:	464a      	mov	r2, r9
 8001b92:	6921      	ldr	r1, [r4, #16]
 8001b94:	f000 face 	bl	8002134 <memcpy>
 8001b98:	89a3      	ldrh	r3, [r4, #12]
 8001b9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba2:	81a3      	strh	r3, [r4, #12]
 8001ba4:	6126      	str	r6, [r4, #16]
 8001ba6:	444e      	add	r6, r9
 8001ba8:	6026      	str	r6, [r4, #0]
 8001baa:	463e      	mov	r6, r7
 8001bac:	6165      	str	r5, [r4, #20]
 8001bae:	eba5 0509 	sub.w	r5, r5, r9
 8001bb2:	60a5      	str	r5, [r4, #8]
 8001bb4:	42be      	cmp	r6, r7
 8001bb6:	d900      	bls.n	8001bba <__ssputs_r+0x86>
 8001bb8:	463e      	mov	r6, r7
 8001bba:	4632      	mov	r2, r6
 8001bbc:	4641      	mov	r1, r8
 8001bbe:	6820      	ldr	r0, [r4, #0]
 8001bc0:	f000 fac6 	bl	8002150 <memmove>
 8001bc4:	68a3      	ldr	r3, [r4, #8]
 8001bc6:	6822      	ldr	r2, [r4, #0]
 8001bc8:	1b9b      	subs	r3, r3, r6
 8001bca:	4432      	add	r2, r6
 8001bcc:	2000      	movs	r0, #0
 8001bce:	60a3      	str	r3, [r4, #8]
 8001bd0:	6022      	str	r2, [r4, #0]
 8001bd2:	e7db      	b.n	8001b8c <__ssputs_r+0x58>
 8001bd4:	462a      	mov	r2, r5
 8001bd6:	f000 fb7b 	bl	80022d0 <_realloc_r>
 8001bda:	4606      	mov	r6, r0
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	d1e1      	bne.n	8001ba4 <__ssputs_r+0x70>
 8001be0:	4650      	mov	r0, sl
 8001be2:	6921      	ldr	r1, [r4, #16]
 8001be4:	f000 face 	bl	8002184 <_free_r>
 8001be8:	e7c7      	b.n	8001b7a <__ssputs_r+0x46>
	...

08001bec <_svfiprintf_r>:
 8001bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bf0:	4698      	mov	r8, r3
 8001bf2:	898b      	ldrh	r3, [r1, #12]
 8001bf4:	4607      	mov	r7, r0
 8001bf6:	061b      	lsls	r3, r3, #24
 8001bf8:	460d      	mov	r5, r1
 8001bfa:	4614      	mov	r4, r2
 8001bfc:	b09d      	sub	sp, #116	; 0x74
 8001bfe:	d50e      	bpl.n	8001c1e <_svfiprintf_r+0x32>
 8001c00:	690b      	ldr	r3, [r1, #16]
 8001c02:	b963      	cbnz	r3, 8001c1e <_svfiprintf_r+0x32>
 8001c04:	2140      	movs	r1, #64	; 0x40
 8001c06:	f000 fb09 	bl	800221c <_malloc_r>
 8001c0a:	6028      	str	r0, [r5, #0]
 8001c0c:	6128      	str	r0, [r5, #16]
 8001c0e:	b920      	cbnz	r0, 8001c1a <_svfiprintf_r+0x2e>
 8001c10:	230c      	movs	r3, #12
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	e0d1      	b.n	8001dbe <_svfiprintf_r+0x1d2>
 8001c1a:	2340      	movs	r3, #64	; 0x40
 8001c1c:	616b      	str	r3, [r5, #20]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	9309      	str	r3, [sp, #36]	; 0x24
 8001c22:	2320      	movs	r3, #32
 8001c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c28:	2330      	movs	r3, #48	; 0x30
 8001c2a:	f04f 0901 	mov.w	r9, #1
 8001c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001dd8 <_svfiprintf_r+0x1ec>
 8001c36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	469a      	mov	sl, r3
 8001c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c42:	b10a      	cbz	r2, 8001c48 <_svfiprintf_r+0x5c>
 8001c44:	2a25      	cmp	r2, #37	; 0x25
 8001c46:	d1f9      	bne.n	8001c3c <_svfiprintf_r+0x50>
 8001c48:	ebba 0b04 	subs.w	fp, sl, r4
 8001c4c:	d00b      	beq.n	8001c66 <_svfiprintf_r+0x7a>
 8001c4e:	465b      	mov	r3, fp
 8001c50:	4622      	mov	r2, r4
 8001c52:	4629      	mov	r1, r5
 8001c54:	4638      	mov	r0, r7
 8001c56:	f7ff ff6d 	bl	8001b34 <__ssputs_r>
 8001c5a:	3001      	adds	r0, #1
 8001c5c:	f000 80aa 	beq.w	8001db4 <_svfiprintf_r+0x1c8>
 8001c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c62:	445a      	add	r2, fp
 8001c64:	9209      	str	r2, [sp, #36]	; 0x24
 8001c66:	f89a 3000 	ldrb.w	r3, [sl]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80a2 	beq.w	8001db4 <_svfiprintf_r+0x1c8>
 8001c70:	2300      	movs	r3, #0
 8001c72:	f04f 32ff 	mov.w	r2, #4294967295
 8001c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c7a:	f10a 0a01 	add.w	sl, sl, #1
 8001c7e:	9304      	str	r3, [sp, #16]
 8001c80:	9307      	str	r3, [sp, #28]
 8001c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c86:	931a      	str	r3, [sp, #104]	; 0x68
 8001c88:	4654      	mov	r4, sl
 8001c8a:	2205      	movs	r2, #5
 8001c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c90:	4851      	ldr	r0, [pc, #324]	; (8001dd8 <_svfiprintf_r+0x1ec>)
 8001c92:	f000 fa41 	bl	8002118 <memchr>
 8001c96:	9a04      	ldr	r2, [sp, #16]
 8001c98:	b9d8      	cbnz	r0, 8001cd2 <_svfiprintf_r+0xe6>
 8001c9a:	06d0      	lsls	r0, r2, #27
 8001c9c:	bf44      	itt	mi
 8001c9e:	2320      	movmi	r3, #32
 8001ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ca4:	0711      	lsls	r1, r2, #28
 8001ca6:	bf44      	itt	mi
 8001ca8:	232b      	movmi	r3, #43	; 0x2b
 8001caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001cae:	f89a 3000 	ldrb.w	r3, [sl]
 8001cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8001cb4:	d015      	beq.n	8001ce2 <_svfiprintf_r+0xf6>
 8001cb6:	4654      	mov	r4, sl
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f04f 0c0a 	mov.w	ip, #10
 8001cbe:	9a07      	ldr	r2, [sp, #28]
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001cc6:	3b30      	subs	r3, #48	; 0x30
 8001cc8:	2b09      	cmp	r3, #9
 8001cca:	d94e      	bls.n	8001d6a <_svfiprintf_r+0x17e>
 8001ccc:	b1b0      	cbz	r0, 8001cfc <_svfiprintf_r+0x110>
 8001cce:	9207      	str	r2, [sp, #28]
 8001cd0:	e014      	b.n	8001cfc <_svfiprintf_r+0x110>
 8001cd2:	eba0 0308 	sub.w	r3, r0, r8
 8001cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	46a2      	mov	sl, r4
 8001cde:	9304      	str	r3, [sp, #16]
 8001ce0:	e7d2      	b.n	8001c88 <_svfiprintf_r+0x9c>
 8001ce2:	9b03      	ldr	r3, [sp, #12]
 8001ce4:	1d19      	adds	r1, r3, #4
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	9103      	str	r1, [sp, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	bfbb      	ittet	lt
 8001cee:	425b      	neglt	r3, r3
 8001cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8001cf4:	9307      	strge	r3, [sp, #28]
 8001cf6:	9307      	strlt	r3, [sp, #28]
 8001cf8:	bfb8      	it	lt
 8001cfa:	9204      	strlt	r2, [sp, #16]
 8001cfc:	7823      	ldrb	r3, [r4, #0]
 8001cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8001d00:	d10c      	bne.n	8001d1c <_svfiprintf_r+0x130>
 8001d02:	7863      	ldrb	r3, [r4, #1]
 8001d04:	2b2a      	cmp	r3, #42	; 0x2a
 8001d06:	d135      	bne.n	8001d74 <_svfiprintf_r+0x188>
 8001d08:	9b03      	ldr	r3, [sp, #12]
 8001d0a:	3402      	adds	r4, #2
 8001d0c:	1d1a      	adds	r2, r3, #4
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	9203      	str	r2, [sp, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	bfb8      	it	lt
 8001d16:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d1a:	9305      	str	r3, [sp, #20]
 8001d1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001de8 <_svfiprintf_r+0x1fc>
 8001d20:	2203      	movs	r2, #3
 8001d22:	4650      	mov	r0, sl
 8001d24:	7821      	ldrb	r1, [r4, #0]
 8001d26:	f000 f9f7 	bl	8002118 <memchr>
 8001d2a:	b140      	cbz	r0, 8001d3e <_svfiprintf_r+0x152>
 8001d2c:	2340      	movs	r3, #64	; 0x40
 8001d2e:	eba0 000a 	sub.w	r0, r0, sl
 8001d32:	fa03 f000 	lsl.w	r0, r3, r0
 8001d36:	9b04      	ldr	r3, [sp, #16]
 8001d38:	3401      	adds	r4, #1
 8001d3a:	4303      	orrs	r3, r0
 8001d3c:	9304      	str	r3, [sp, #16]
 8001d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d42:	2206      	movs	r2, #6
 8001d44:	4825      	ldr	r0, [pc, #148]	; (8001ddc <_svfiprintf_r+0x1f0>)
 8001d46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d4a:	f000 f9e5 	bl	8002118 <memchr>
 8001d4e:	2800      	cmp	r0, #0
 8001d50:	d038      	beq.n	8001dc4 <_svfiprintf_r+0x1d8>
 8001d52:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <_svfiprintf_r+0x1f4>)
 8001d54:	bb1b      	cbnz	r3, 8001d9e <_svfiprintf_r+0x1b2>
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	3307      	adds	r3, #7
 8001d5a:	f023 0307 	bic.w	r3, r3, #7
 8001d5e:	3308      	adds	r3, #8
 8001d60:	9303      	str	r3, [sp, #12]
 8001d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d64:	4433      	add	r3, r6
 8001d66:	9309      	str	r3, [sp, #36]	; 0x24
 8001d68:	e767      	b.n	8001c3a <_svfiprintf_r+0x4e>
 8001d6a:	460c      	mov	r4, r1
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d72:	e7a5      	b.n	8001cc0 <_svfiprintf_r+0xd4>
 8001d74:	2300      	movs	r3, #0
 8001d76:	f04f 0c0a 	mov.w	ip, #10
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	3401      	adds	r4, #1
 8001d7e:	9305      	str	r3, [sp, #20]
 8001d80:	4620      	mov	r0, r4
 8001d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d86:	3a30      	subs	r2, #48	; 0x30
 8001d88:	2a09      	cmp	r2, #9
 8001d8a:	d903      	bls.n	8001d94 <_svfiprintf_r+0x1a8>
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0c5      	beq.n	8001d1c <_svfiprintf_r+0x130>
 8001d90:	9105      	str	r1, [sp, #20]
 8001d92:	e7c3      	b.n	8001d1c <_svfiprintf_r+0x130>
 8001d94:	4604      	mov	r4, r0
 8001d96:	2301      	movs	r3, #1
 8001d98:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d9c:	e7f0      	b.n	8001d80 <_svfiprintf_r+0x194>
 8001d9e:	ab03      	add	r3, sp, #12
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	462a      	mov	r2, r5
 8001da4:	4638      	mov	r0, r7
 8001da6:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <_svfiprintf_r+0x1f8>)
 8001da8:	a904      	add	r1, sp, #16
 8001daa:	f3af 8000 	nop.w
 8001dae:	1c42      	adds	r2, r0, #1
 8001db0:	4606      	mov	r6, r0
 8001db2:	d1d6      	bne.n	8001d62 <_svfiprintf_r+0x176>
 8001db4:	89ab      	ldrh	r3, [r5, #12]
 8001db6:	065b      	lsls	r3, r3, #25
 8001db8:	f53f af2c 	bmi.w	8001c14 <_svfiprintf_r+0x28>
 8001dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001dbe:	b01d      	add	sp, #116	; 0x74
 8001dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dc4:	ab03      	add	r3, sp, #12
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	462a      	mov	r2, r5
 8001dca:	4638      	mov	r0, r7
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <_svfiprintf_r+0x1f8>)
 8001dce:	a904      	add	r1, sp, #16
 8001dd0:	f000 f87c 	bl	8001ecc <_printf_i>
 8001dd4:	e7eb      	b.n	8001dae <_svfiprintf_r+0x1c2>
 8001dd6:	bf00      	nop
 8001dd8:	080023bc 	.word	0x080023bc
 8001ddc:	080023c6 	.word	0x080023c6
 8001de0:	00000000 	.word	0x00000000
 8001de4:	08001b35 	.word	0x08001b35
 8001de8:	080023c2 	.word	0x080023c2

08001dec <_printf_common>:
 8001dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001df0:	4616      	mov	r6, r2
 8001df2:	4699      	mov	r9, r3
 8001df4:	688a      	ldr	r2, [r1, #8]
 8001df6:	690b      	ldr	r3, [r1, #16]
 8001df8:	4607      	mov	r7, r0
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	bfb8      	it	lt
 8001dfe:	4613      	movlt	r3, r2
 8001e00:	6033      	str	r3, [r6, #0]
 8001e02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e06:	460c      	mov	r4, r1
 8001e08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e0c:	b10a      	cbz	r2, 8001e12 <_printf_common+0x26>
 8001e0e:	3301      	adds	r3, #1
 8001e10:	6033      	str	r3, [r6, #0]
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	0699      	lsls	r1, r3, #26
 8001e16:	bf42      	ittt	mi
 8001e18:	6833      	ldrmi	r3, [r6, #0]
 8001e1a:	3302      	addmi	r3, #2
 8001e1c:	6033      	strmi	r3, [r6, #0]
 8001e1e:	6825      	ldr	r5, [r4, #0]
 8001e20:	f015 0506 	ands.w	r5, r5, #6
 8001e24:	d106      	bne.n	8001e34 <_printf_common+0x48>
 8001e26:	f104 0a19 	add.w	sl, r4, #25
 8001e2a:	68e3      	ldr	r3, [r4, #12]
 8001e2c:	6832      	ldr	r2, [r6, #0]
 8001e2e:	1a9b      	subs	r3, r3, r2
 8001e30:	42ab      	cmp	r3, r5
 8001e32:	dc28      	bgt.n	8001e86 <_printf_common+0x9a>
 8001e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e38:	1e13      	subs	r3, r2, #0
 8001e3a:	6822      	ldr	r2, [r4, #0]
 8001e3c:	bf18      	it	ne
 8001e3e:	2301      	movne	r3, #1
 8001e40:	0692      	lsls	r2, r2, #26
 8001e42:	d42d      	bmi.n	8001ea0 <_printf_common+0xb4>
 8001e44:	4649      	mov	r1, r9
 8001e46:	4638      	mov	r0, r7
 8001e48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e4c:	47c0      	blx	r8
 8001e4e:	3001      	adds	r0, #1
 8001e50:	d020      	beq.n	8001e94 <_printf_common+0xa8>
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	68e5      	ldr	r5, [r4, #12]
 8001e56:	f003 0306 	and.w	r3, r3, #6
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf18      	it	ne
 8001e5e:	2500      	movne	r5, #0
 8001e60:	6832      	ldr	r2, [r6, #0]
 8001e62:	f04f 0600 	mov.w	r6, #0
 8001e66:	68a3      	ldr	r3, [r4, #8]
 8001e68:	bf08      	it	eq
 8001e6a:	1aad      	subeq	r5, r5, r2
 8001e6c:	6922      	ldr	r2, [r4, #16]
 8001e6e:	bf08      	it	eq
 8001e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e74:	4293      	cmp	r3, r2
 8001e76:	bfc4      	itt	gt
 8001e78:	1a9b      	subgt	r3, r3, r2
 8001e7a:	18ed      	addgt	r5, r5, r3
 8001e7c:	341a      	adds	r4, #26
 8001e7e:	42b5      	cmp	r5, r6
 8001e80:	d11a      	bne.n	8001eb8 <_printf_common+0xcc>
 8001e82:	2000      	movs	r0, #0
 8001e84:	e008      	b.n	8001e98 <_printf_common+0xac>
 8001e86:	2301      	movs	r3, #1
 8001e88:	4652      	mov	r2, sl
 8001e8a:	4649      	mov	r1, r9
 8001e8c:	4638      	mov	r0, r7
 8001e8e:	47c0      	blx	r8
 8001e90:	3001      	adds	r0, #1
 8001e92:	d103      	bne.n	8001e9c <_printf_common+0xb0>
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e9c:	3501      	adds	r5, #1
 8001e9e:	e7c4      	b.n	8001e2a <_printf_common+0x3e>
 8001ea0:	2030      	movs	r0, #48	; 0x30
 8001ea2:	18e1      	adds	r1, r4, r3
 8001ea4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001eae:	4422      	add	r2, r4
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001eb6:	e7c5      	b.n	8001e44 <_printf_common+0x58>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	4622      	mov	r2, r4
 8001ebc:	4649      	mov	r1, r9
 8001ebe:	4638      	mov	r0, r7
 8001ec0:	47c0      	blx	r8
 8001ec2:	3001      	adds	r0, #1
 8001ec4:	d0e6      	beq.n	8001e94 <_printf_common+0xa8>
 8001ec6:	3601      	adds	r6, #1
 8001ec8:	e7d9      	b.n	8001e7e <_printf_common+0x92>
	...

08001ecc <_printf_i>:
 8001ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ed0:	460c      	mov	r4, r1
 8001ed2:	7e27      	ldrb	r7, [r4, #24]
 8001ed4:	4691      	mov	r9, r2
 8001ed6:	2f78      	cmp	r7, #120	; 0x78
 8001ed8:	4680      	mov	r8, r0
 8001eda:	469a      	mov	sl, r3
 8001edc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001ede:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ee2:	d807      	bhi.n	8001ef4 <_printf_i+0x28>
 8001ee4:	2f62      	cmp	r7, #98	; 0x62
 8001ee6:	d80a      	bhi.n	8001efe <_printf_i+0x32>
 8001ee8:	2f00      	cmp	r7, #0
 8001eea:	f000 80d9 	beq.w	80020a0 <_printf_i+0x1d4>
 8001eee:	2f58      	cmp	r7, #88	; 0x58
 8001ef0:	f000 80a4 	beq.w	800203c <_printf_i+0x170>
 8001ef4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001ef8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001efc:	e03a      	b.n	8001f74 <_printf_i+0xa8>
 8001efe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f02:	2b15      	cmp	r3, #21
 8001f04:	d8f6      	bhi.n	8001ef4 <_printf_i+0x28>
 8001f06:	a001      	add	r0, pc, #4	; (adr r0, 8001f0c <_printf_i+0x40>)
 8001f08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001f0c:	08001f65 	.word	0x08001f65
 8001f10:	08001f79 	.word	0x08001f79
 8001f14:	08001ef5 	.word	0x08001ef5
 8001f18:	08001ef5 	.word	0x08001ef5
 8001f1c:	08001ef5 	.word	0x08001ef5
 8001f20:	08001ef5 	.word	0x08001ef5
 8001f24:	08001f79 	.word	0x08001f79
 8001f28:	08001ef5 	.word	0x08001ef5
 8001f2c:	08001ef5 	.word	0x08001ef5
 8001f30:	08001ef5 	.word	0x08001ef5
 8001f34:	08001ef5 	.word	0x08001ef5
 8001f38:	08002087 	.word	0x08002087
 8001f3c:	08001fa9 	.word	0x08001fa9
 8001f40:	08002069 	.word	0x08002069
 8001f44:	08001ef5 	.word	0x08001ef5
 8001f48:	08001ef5 	.word	0x08001ef5
 8001f4c:	080020a9 	.word	0x080020a9
 8001f50:	08001ef5 	.word	0x08001ef5
 8001f54:	08001fa9 	.word	0x08001fa9
 8001f58:	08001ef5 	.word	0x08001ef5
 8001f5c:	08001ef5 	.word	0x08001ef5
 8001f60:	08002071 	.word	0x08002071
 8001f64:	680b      	ldr	r3, [r1, #0]
 8001f66:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001f6a:	1d1a      	adds	r2, r3, #4
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	600a      	str	r2, [r1, #0]
 8001f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0a4      	b.n	80020c2 <_printf_i+0x1f6>
 8001f78:	6825      	ldr	r5, [r4, #0]
 8001f7a:	6808      	ldr	r0, [r1, #0]
 8001f7c:	062e      	lsls	r6, r5, #24
 8001f7e:	f100 0304 	add.w	r3, r0, #4
 8001f82:	d50a      	bpl.n	8001f9a <_printf_i+0xce>
 8001f84:	6805      	ldr	r5, [r0, #0]
 8001f86:	600b      	str	r3, [r1, #0]
 8001f88:	2d00      	cmp	r5, #0
 8001f8a:	da03      	bge.n	8001f94 <_printf_i+0xc8>
 8001f8c:	232d      	movs	r3, #45	; 0x2d
 8001f8e:	426d      	negs	r5, r5
 8001f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f94:	230a      	movs	r3, #10
 8001f96:	485e      	ldr	r0, [pc, #376]	; (8002110 <_printf_i+0x244>)
 8001f98:	e019      	b.n	8001fce <_printf_i+0x102>
 8001f9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001f9e:	6805      	ldr	r5, [r0, #0]
 8001fa0:	600b      	str	r3, [r1, #0]
 8001fa2:	bf18      	it	ne
 8001fa4:	b22d      	sxthne	r5, r5
 8001fa6:	e7ef      	b.n	8001f88 <_printf_i+0xbc>
 8001fa8:	680b      	ldr	r3, [r1, #0]
 8001faa:	6825      	ldr	r5, [r4, #0]
 8001fac:	1d18      	adds	r0, r3, #4
 8001fae:	6008      	str	r0, [r1, #0]
 8001fb0:	0628      	lsls	r0, r5, #24
 8001fb2:	d501      	bpl.n	8001fb8 <_printf_i+0xec>
 8001fb4:	681d      	ldr	r5, [r3, #0]
 8001fb6:	e002      	b.n	8001fbe <_printf_i+0xf2>
 8001fb8:	0669      	lsls	r1, r5, #25
 8001fba:	d5fb      	bpl.n	8001fb4 <_printf_i+0xe8>
 8001fbc:	881d      	ldrh	r5, [r3, #0]
 8001fbe:	2f6f      	cmp	r7, #111	; 0x6f
 8001fc0:	bf0c      	ite	eq
 8001fc2:	2308      	moveq	r3, #8
 8001fc4:	230a      	movne	r3, #10
 8001fc6:	4852      	ldr	r0, [pc, #328]	; (8002110 <_printf_i+0x244>)
 8001fc8:	2100      	movs	r1, #0
 8001fca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001fce:	6866      	ldr	r6, [r4, #4]
 8001fd0:	2e00      	cmp	r6, #0
 8001fd2:	bfa8      	it	ge
 8001fd4:	6821      	ldrge	r1, [r4, #0]
 8001fd6:	60a6      	str	r6, [r4, #8]
 8001fd8:	bfa4      	itt	ge
 8001fda:	f021 0104 	bicge.w	r1, r1, #4
 8001fde:	6021      	strge	r1, [r4, #0]
 8001fe0:	b90d      	cbnz	r5, 8001fe6 <_printf_i+0x11a>
 8001fe2:	2e00      	cmp	r6, #0
 8001fe4:	d04d      	beq.n	8002082 <_printf_i+0x1b6>
 8001fe6:	4616      	mov	r6, r2
 8001fe8:	fbb5 f1f3 	udiv	r1, r5, r3
 8001fec:	fb03 5711 	mls	r7, r3, r1, r5
 8001ff0:	5dc7      	ldrb	r7, [r0, r7]
 8001ff2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001ff6:	462f      	mov	r7, r5
 8001ff8:	42bb      	cmp	r3, r7
 8001ffa:	460d      	mov	r5, r1
 8001ffc:	d9f4      	bls.n	8001fe8 <_printf_i+0x11c>
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d10b      	bne.n	800201a <_printf_i+0x14e>
 8002002:	6823      	ldr	r3, [r4, #0]
 8002004:	07df      	lsls	r7, r3, #31
 8002006:	d508      	bpl.n	800201a <_printf_i+0x14e>
 8002008:	6923      	ldr	r3, [r4, #16]
 800200a:	6861      	ldr	r1, [r4, #4]
 800200c:	4299      	cmp	r1, r3
 800200e:	bfde      	ittt	le
 8002010:	2330      	movle	r3, #48	; 0x30
 8002012:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002016:	f106 36ff 	addle.w	r6, r6, #4294967295
 800201a:	1b92      	subs	r2, r2, r6
 800201c:	6122      	str	r2, [r4, #16]
 800201e:	464b      	mov	r3, r9
 8002020:	4621      	mov	r1, r4
 8002022:	4640      	mov	r0, r8
 8002024:	f8cd a000 	str.w	sl, [sp]
 8002028:	aa03      	add	r2, sp, #12
 800202a:	f7ff fedf 	bl	8001dec <_printf_common>
 800202e:	3001      	adds	r0, #1
 8002030:	d14c      	bne.n	80020cc <_printf_i+0x200>
 8002032:	f04f 30ff 	mov.w	r0, #4294967295
 8002036:	b004      	add	sp, #16
 8002038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800203c:	4834      	ldr	r0, [pc, #208]	; (8002110 <_printf_i+0x244>)
 800203e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002042:	680e      	ldr	r6, [r1, #0]
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	f856 5b04 	ldr.w	r5, [r6], #4
 800204a:	061f      	lsls	r7, r3, #24
 800204c:	600e      	str	r6, [r1, #0]
 800204e:	d514      	bpl.n	800207a <_printf_i+0x1ae>
 8002050:	07d9      	lsls	r1, r3, #31
 8002052:	bf44      	itt	mi
 8002054:	f043 0320 	orrmi.w	r3, r3, #32
 8002058:	6023      	strmi	r3, [r4, #0]
 800205a:	b91d      	cbnz	r5, 8002064 <_printf_i+0x198>
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	f023 0320 	bic.w	r3, r3, #32
 8002062:	6023      	str	r3, [r4, #0]
 8002064:	2310      	movs	r3, #16
 8002066:	e7af      	b.n	8001fc8 <_printf_i+0xfc>
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	f043 0320 	orr.w	r3, r3, #32
 800206e:	6023      	str	r3, [r4, #0]
 8002070:	2378      	movs	r3, #120	; 0x78
 8002072:	4828      	ldr	r0, [pc, #160]	; (8002114 <_printf_i+0x248>)
 8002074:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002078:	e7e3      	b.n	8002042 <_printf_i+0x176>
 800207a:	065e      	lsls	r6, r3, #25
 800207c:	bf48      	it	mi
 800207e:	b2ad      	uxthmi	r5, r5
 8002080:	e7e6      	b.n	8002050 <_printf_i+0x184>
 8002082:	4616      	mov	r6, r2
 8002084:	e7bb      	b.n	8001ffe <_printf_i+0x132>
 8002086:	680b      	ldr	r3, [r1, #0]
 8002088:	6826      	ldr	r6, [r4, #0]
 800208a:	1d1d      	adds	r5, r3, #4
 800208c:	6960      	ldr	r0, [r4, #20]
 800208e:	600d      	str	r5, [r1, #0]
 8002090:	0635      	lsls	r5, r6, #24
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	d501      	bpl.n	800209a <_printf_i+0x1ce>
 8002096:	6018      	str	r0, [r3, #0]
 8002098:	e002      	b.n	80020a0 <_printf_i+0x1d4>
 800209a:	0671      	lsls	r1, r6, #25
 800209c:	d5fb      	bpl.n	8002096 <_printf_i+0x1ca>
 800209e:	8018      	strh	r0, [r3, #0]
 80020a0:	2300      	movs	r3, #0
 80020a2:	4616      	mov	r6, r2
 80020a4:	6123      	str	r3, [r4, #16]
 80020a6:	e7ba      	b.n	800201e <_printf_i+0x152>
 80020a8:	680b      	ldr	r3, [r1, #0]
 80020aa:	1d1a      	adds	r2, r3, #4
 80020ac:	600a      	str	r2, [r1, #0]
 80020ae:	681e      	ldr	r6, [r3, #0]
 80020b0:	2100      	movs	r1, #0
 80020b2:	4630      	mov	r0, r6
 80020b4:	6862      	ldr	r2, [r4, #4]
 80020b6:	f000 f82f 	bl	8002118 <memchr>
 80020ba:	b108      	cbz	r0, 80020c0 <_printf_i+0x1f4>
 80020bc:	1b80      	subs	r0, r0, r6
 80020be:	6060      	str	r0, [r4, #4]
 80020c0:	6863      	ldr	r3, [r4, #4]
 80020c2:	6123      	str	r3, [r4, #16]
 80020c4:	2300      	movs	r3, #0
 80020c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020ca:	e7a8      	b.n	800201e <_printf_i+0x152>
 80020cc:	4632      	mov	r2, r6
 80020ce:	4649      	mov	r1, r9
 80020d0:	4640      	mov	r0, r8
 80020d2:	6923      	ldr	r3, [r4, #16]
 80020d4:	47d0      	blx	sl
 80020d6:	3001      	adds	r0, #1
 80020d8:	d0ab      	beq.n	8002032 <_printf_i+0x166>
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	079b      	lsls	r3, r3, #30
 80020de:	d413      	bmi.n	8002108 <_printf_i+0x23c>
 80020e0:	68e0      	ldr	r0, [r4, #12]
 80020e2:	9b03      	ldr	r3, [sp, #12]
 80020e4:	4298      	cmp	r0, r3
 80020e6:	bfb8      	it	lt
 80020e8:	4618      	movlt	r0, r3
 80020ea:	e7a4      	b.n	8002036 <_printf_i+0x16a>
 80020ec:	2301      	movs	r3, #1
 80020ee:	4632      	mov	r2, r6
 80020f0:	4649      	mov	r1, r9
 80020f2:	4640      	mov	r0, r8
 80020f4:	47d0      	blx	sl
 80020f6:	3001      	adds	r0, #1
 80020f8:	d09b      	beq.n	8002032 <_printf_i+0x166>
 80020fa:	3501      	adds	r5, #1
 80020fc:	68e3      	ldr	r3, [r4, #12]
 80020fe:	9903      	ldr	r1, [sp, #12]
 8002100:	1a5b      	subs	r3, r3, r1
 8002102:	42ab      	cmp	r3, r5
 8002104:	dcf2      	bgt.n	80020ec <_printf_i+0x220>
 8002106:	e7eb      	b.n	80020e0 <_printf_i+0x214>
 8002108:	2500      	movs	r5, #0
 800210a:	f104 0619 	add.w	r6, r4, #25
 800210e:	e7f5      	b.n	80020fc <_printf_i+0x230>
 8002110:	080023cd 	.word	0x080023cd
 8002114:	080023de 	.word	0x080023de

08002118 <memchr>:
 8002118:	4603      	mov	r3, r0
 800211a:	b510      	push	{r4, lr}
 800211c:	b2c9      	uxtb	r1, r1
 800211e:	4402      	add	r2, r0
 8002120:	4293      	cmp	r3, r2
 8002122:	4618      	mov	r0, r3
 8002124:	d101      	bne.n	800212a <memchr+0x12>
 8002126:	2000      	movs	r0, #0
 8002128:	e003      	b.n	8002132 <memchr+0x1a>
 800212a:	7804      	ldrb	r4, [r0, #0]
 800212c:	3301      	adds	r3, #1
 800212e:	428c      	cmp	r4, r1
 8002130:	d1f6      	bne.n	8002120 <memchr+0x8>
 8002132:	bd10      	pop	{r4, pc}

08002134 <memcpy>:
 8002134:	440a      	add	r2, r1
 8002136:	4291      	cmp	r1, r2
 8002138:	f100 33ff 	add.w	r3, r0, #4294967295
 800213c:	d100      	bne.n	8002140 <memcpy+0xc>
 800213e:	4770      	bx	lr
 8002140:	b510      	push	{r4, lr}
 8002142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002146:	4291      	cmp	r1, r2
 8002148:	f803 4f01 	strb.w	r4, [r3, #1]!
 800214c:	d1f9      	bne.n	8002142 <memcpy+0xe>
 800214e:	bd10      	pop	{r4, pc}

08002150 <memmove>:
 8002150:	4288      	cmp	r0, r1
 8002152:	b510      	push	{r4, lr}
 8002154:	eb01 0402 	add.w	r4, r1, r2
 8002158:	d902      	bls.n	8002160 <memmove+0x10>
 800215a:	4284      	cmp	r4, r0
 800215c:	4623      	mov	r3, r4
 800215e:	d807      	bhi.n	8002170 <memmove+0x20>
 8002160:	1e43      	subs	r3, r0, #1
 8002162:	42a1      	cmp	r1, r4
 8002164:	d008      	beq.n	8002178 <memmove+0x28>
 8002166:	f811 2b01 	ldrb.w	r2, [r1], #1
 800216a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800216e:	e7f8      	b.n	8002162 <memmove+0x12>
 8002170:	4601      	mov	r1, r0
 8002172:	4402      	add	r2, r0
 8002174:	428a      	cmp	r2, r1
 8002176:	d100      	bne.n	800217a <memmove+0x2a>
 8002178:	bd10      	pop	{r4, pc}
 800217a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800217e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002182:	e7f7      	b.n	8002174 <memmove+0x24>

08002184 <_free_r>:
 8002184:	b538      	push	{r3, r4, r5, lr}
 8002186:	4605      	mov	r5, r0
 8002188:	2900      	cmp	r1, #0
 800218a:	d043      	beq.n	8002214 <_free_r+0x90>
 800218c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002190:	1f0c      	subs	r4, r1, #4
 8002192:	2b00      	cmp	r3, #0
 8002194:	bfb8      	it	lt
 8002196:	18e4      	addlt	r4, r4, r3
 8002198:	f000 f8d0 	bl	800233c <__malloc_lock>
 800219c:	4a1e      	ldr	r2, [pc, #120]	; (8002218 <_free_r+0x94>)
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	4610      	mov	r0, r2
 80021a2:	b933      	cbnz	r3, 80021b2 <_free_r+0x2e>
 80021a4:	6063      	str	r3, [r4, #4]
 80021a6:	6014      	str	r4, [r2, #0]
 80021a8:	4628      	mov	r0, r5
 80021aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021ae:	f000 b8cb 	b.w	8002348 <__malloc_unlock>
 80021b2:	42a3      	cmp	r3, r4
 80021b4:	d90a      	bls.n	80021cc <_free_r+0x48>
 80021b6:	6821      	ldr	r1, [r4, #0]
 80021b8:	1862      	adds	r2, r4, r1
 80021ba:	4293      	cmp	r3, r2
 80021bc:	bf01      	itttt	eq
 80021be:	681a      	ldreq	r2, [r3, #0]
 80021c0:	685b      	ldreq	r3, [r3, #4]
 80021c2:	1852      	addeq	r2, r2, r1
 80021c4:	6022      	streq	r2, [r4, #0]
 80021c6:	6063      	str	r3, [r4, #4]
 80021c8:	6004      	str	r4, [r0, #0]
 80021ca:	e7ed      	b.n	80021a8 <_free_r+0x24>
 80021cc:	461a      	mov	r2, r3
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	b10b      	cbz	r3, 80021d6 <_free_r+0x52>
 80021d2:	42a3      	cmp	r3, r4
 80021d4:	d9fa      	bls.n	80021cc <_free_r+0x48>
 80021d6:	6811      	ldr	r1, [r2, #0]
 80021d8:	1850      	adds	r0, r2, r1
 80021da:	42a0      	cmp	r0, r4
 80021dc:	d10b      	bne.n	80021f6 <_free_r+0x72>
 80021de:	6820      	ldr	r0, [r4, #0]
 80021e0:	4401      	add	r1, r0
 80021e2:	1850      	adds	r0, r2, r1
 80021e4:	4283      	cmp	r3, r0
 80021e6:	6011      	str	r1, [r2, #0]
 80021e8:	d1de      	bne.n	80021a8 <_free_r+0x24>
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4401      	add	r1, r0
 80021f0:	6011      	str	r1, [r2, #0]
 80021f2:	6053      	str	r3, [r2, #4]
 80021f4:	e7d8      	b.n	80021a8 <_free_r+0x24>
 80021f6:	d902      	bls.n	80021fe <_free_r+0x7a>
 80021f8:	230c      	movs	r3, #12
 80021fa:	602b      	str	r3, [r5, #0]
 80021fc:	e7d4      	b.n	80021a8 <_free_r+0x24>
 80021fe:	6820      	ldr	r0, [r4, #0]
 8002200:	1821      	adds	r1, r4, r0
 8002202:	428b      	cmp	r3, r1
 8002204:	bf01      	itttt	eq
 8002206:	6819      	ldreq	r1, [r3, #0]
 8002208:	685b      	ldreq	r3, [r3, #4]
 800220a:	1809      	addeq	r1, r1, r0
 800220c:	6021      	streq	r1, [r4, #0]
 800220e:	6063      	str	r3, [r4, #4]
 8002210:	6054      	str	r4, [r2, #4]
 8002212:	e7c9      	b.n	80021a8 <_free_r+0x24>
 8002214:	bd38      	pop	{r3, r4, r5, pc}
 8002216:	bf00      	nop
 8002218:	200000fc 	.word	0x200000fc

0800221c <_malloc_r>:
 800221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221e:	1ccd      	adds	r5, r1, #3
 8002220:	f025 0503 	bic.w	r5, r5, #3
 8002224:	3508      	adds	r5, #8
 8002226:	2d0c      	cmp	r5, #12
 8002228:	bf38      	it	cc
 800222a:	250c      	movcc	r5, #12
 800222c:	2d00      	cmp	r5, #0
 800222e:	4606      	mov	r6, r0
 8002230:	db01      	blt.n	8002236 <_malloc_r+0x1a>
 8002232:	42a9      	cmp	r1, r5
 8002234:	d903      	bls.n	800223e <_malloc_r+0x22>
 8002236:	230c      	movs	r3, #12
 8002238:	6033      	str	r3, [r6, #0]
 800223a:	2000      	movs	r0, #0
 800223c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800223e:	f000 f87d 	bl	800233c <__malloc_lock>
 8002242:	4921      	ldr	r1, [pc, #132]	; (80022c8 <_malloc_r+0xac>)
 8002244:	680a      	ldr	r2, [r1, #0]
 8002246:	4614      	mov	r4, r2
 8002248:	b99c      	cbnz	r4, 8002272 <_malloc_r+0x56>
 800224a:	4f20      	ldr	r7, [pc, #128]	; (80022cc <_malloc_r+0xb0>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	b923      	cbnz	r3, 800225a <_malloc_r+0x3e>
 8002250:	4621      	mov	r1, r4
 8002252:	4630      	mov	r0, r6
 8002254:	f000 f862 	bl	800231c <_sbrk_r>
 8002258:	6038      	str	r0, [r7, #0]
 800225a:	4629      	mov	r1, r5
 800225c:	4630      	mov	r0, r6
 800225e:	f000 f85d 	bl	800231c <_sbrk_r>
 8002262:	1c43      	adds	r3, r0, #1
 8002264:	d123      	bne.n	80022ae <_malloc_r+0x92>
 8002266:	230c      	movs	r3, #12
 8002268:	4630      	mov	r0, r6
 800226a:	6033      	str	r3, [r6, #0]
 800226c:	f000 f86c 	bl	8002348 <__malloc_unlock>
 8002270:	e7e3      	b.n	800223a <_malloc_r+0x1e>
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	1b5b      	subs	r3, r3, r5
 8002276:	d417      	bmi.n	80022a8 <_malloc_r+0x8c>
 8002278:	2b0b      	cmp	r3, #11
 800227a:	d903      	bls.n	8002284 <_malloc_r+0x68>
 800227c:	6023      	str	r3, [r4, #0]
 800227e:	441c      	add	r4, r3
 8002280:	6025      	str	r5, [r4, #0]
 8002282:	e004      	b.n	800228e <_malloc_r+0x72>
 8002284:	6863      	ldr	r3, [r4, #4]
 8002286:	42a2      	cmp	r2, r4
 8002288:	bf0c      	ite	eq
 800228a:	600b      	streq	r3, [r1, #0]
 800228c:	6053      	strne	r3, [r2, #4]
 800228e:	4630      	mov	r0, r6
 8002290:	f000 f85a 	bl	8002348 <__malloc_unlock>
 8002294:	f104 000b 	add.w	r0, r4, #11
 8002298:	1d23      	adds	r3, r4, #4
 800229a:	f020 0007 	bic.w	r0, r0, #7
 800229e:	1ac2      	subs	r2, r0, r3
 80022a0:	d0cc      	beq.n	800223c <_malloc_r+0x20>
 80022a2:	1a1b      	subs	r3, r3, r0
 80022a4:	50a3      	str	r3, [r4, r2]
 80022a6:	e7c9      	b.n	800223c <_malloc_r+0x20>
 80022a8:	4622      	mov	r2, r4
 80022aa:	6864      	ldr	r4, [r4, #4]
 80022ac:	e7cc      	b.n	8002248 <_malloc_r+0x2c>
 80022ae:	1cc4      	adds	r4, r0, #3
 80022b0:	f024 0403 	bic.w	r4, r4, #3
 80022b4:	42a0      	cmp	r0, r4
 80022b6:	d0e3      	beq.n	8002280 <_malloc_r+0x64>
 80022b8:	1a21      	subs	r1, r4, r0
 80022ba:	4630      	mov	r0, r6
 80022bc:	f000 f82e 	bl	800231c <_sbrk_r>
 80022c0:	3001      	adds	r0, #1
 80022c2:	d1dd      	bne.n	8002280 <_malloc_r+0x64>
 80022c4:	e7cf      	b.n	8002266 <_malloc_r+0x4a>
 80022c6:	bf00      	nop
 80022c8:	200000fc 	.word	0x200000fc
 80022cc:	20000100 	.word	0x20000100

080022d0 <_realloc_r>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	4607      	mov	r7, r0
 80022d4:	4614      	mov	r4, r2
 80022d6:	460e      	mov	r6, r1
 80022d8:	b921      	cbnz	r1, 80022e4 <_realloc_r+0x14>
 80022da:	4611      	mov	r1, r2
 80022dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80022e0:	f7ff bf9c 	b.w	800221c <_malloc_r>
 80022e4:	b922      	cbnz	r2, 80022f0 <_realloc_r+0x20>
 80022e6:	f7ff ff4d 	bl	8002184 <_free_r>
 80022ea:	4625      	mov	r5, r4
 80022ec:	4628      	mov	r0, r5
 80022ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022f0:	f000 f830 	bl	8002354 <_malloc_usable_size_r>
 80022f4:	42a0      	cmp	r0, r4
 80022f6:	d20f      	bcs.n	8002318 <_realloc_r+0x48>
 80022f8:	4621      	mov	r1, r4
 80022fa:	4638      	mov	r0, r7
 80022fc:	f7ff ff8e 	bl	800221c <_malloc_r>
 8002300:	4605      	mov	r5, r0
 8002302:	2800      	cmp	r0, #0
 8002304:	d0f2      	beq.n	80022ec <_realloc_r+0x1c>
 8002306:	4631      	mov	r1, r6
 8002308:	4622      	mov	r2, r4
 800230a:	f7ff ff13 	bl	8002134 <memcpy>
 800230e:	4631      	mov	r1, r6
 8002310:	4638      	mov	r0, r7
 8002312:	f7ff ff37 	bl	8002184 <_free_r>
 8002316:	e7e9      	b.n	80022ec <_realloc_r+0x1c>
 8002318:	4635      	mov	r5, r6
 800231a:	e7e7      	b.n	80022ec <_realloc_r+0x1c>

0800231c <_sbrk_r>:
 800231c:	b538      	push	{r3, r4, r5, lr}
 800231e:	2300      	movs	r3, #0
 8002320:	4d05      	ldr	r5, [pc, #20]	; (8002338 <_sbrk_r+0x1c>)
 8002322:	4604      	mov	r4, r0
 8002324:	4608      	mov	r0, r1
 8002326:	602b      	str	r3, [r5, #0]
 8002328:	f7fe fa2c 	bl	8000784 <_sbrk>
 800232c:	1c43      	adds	r3, r0, #1
 800232e:	d102      	bne.n	8002336 <_sbrk_r+0x1a>
 8002330:	682b      	ldr	r3, [r5, #0]
 8002332:	b103      	cbz	r3, 8002336 <_sbrk_r+0x1a>
 8002334:	6023      	str	r3, [r4, #0]
 8002336:	bd38      	pop	{r3, r4, r5, pc}
 8002338:	20000158 	.word	0x20000158

0800233c <__malloc_lock>:
 800233c:	4801      	ldr	r0, [pc, #4]	; (8002344 <__malloc_lock+0x8>)
 800233e:	f000 b811 	b.w	8002364 <__retarget_lock_acquire_recursive>
 8002342:	bf00      	nop
 8002344:	20000160 	.word	0x20000160

08002348 <__malloc_unlock>:
 8002348:	4801      	ldr	r0, [pc, #4]	; (8002350 <__malloc_unlock+0x8>)
 800234a:	f000 b80c 	b.w	8002366 <__retarget_lock_release_recursive>
 800234e:	bf00      	nop
 8002350:	20000160 	.word	0x20000160

08002354 <_malloc_usable_size_r>:
 8002354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002358:	1f18      	subs	r0, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	bfbc      	itt	lt
 800235e:	580b      	ldrlt	r3, [r1, r0]
 8002360:	18c0      	addlt	r0, r0, r3
 8002362:	4770      	bx	lr

08002364 <__retarget_lock_acquire_recursive>:
 8002364:	4770      	bx	lr

08002366 <__retarget_lock_release_recursive>:
 8002366:	4770      	bx	lr

08002368 <_init>:
 8002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236a:	bf00      	nop
 800236c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236e:	bc08      	pop	{r3}
 8002370:	469e      	mov	lr, r3
 8002372:	4770      	bx	lr

08002374 <_fini>:
 8002374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002376:	bf00      	nop
 8002378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237a:	bc08      	pop	{r3}
 800237c:	469e      	mov	lr, r3
 800237e:	4770      	bx	lr
